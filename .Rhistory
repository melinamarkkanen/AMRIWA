x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_Gene)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(resfinder_PHY_Gene_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot
# Transpose
heat.t <- t(heat.df)
View(heat.t)
heat_num = as.matrix(heat.t[1:105,])
View(heat_num)
class(heat_num) <- "numeric"
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_row = heat.t$country, main = "Country")
??pheatmap
annot_col = data.frame(heat.t [106])
View(annot_col)
annot_col = data.frame(heat.df$country)
View(annot_col)
rownames(annot_col) = colnames(df_num)
rownames(annot_col) = colnames(heat_num)
rownames(annot_col) = colnames(heat_num)
View()
View(annot_col)
View(heat_num)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country")
heat_num_scale = scale(heat_num)
rownames(annot_col) = colnames(heat_num_scale)
pheatmap(heat_num_scale, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country")
pheatmap(heat_num_scale, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country")
pheatmap(heat_num_scale, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), annotation_col = annot_col, main = "Country")
pheatmap(heat_num_scale, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), annotation_col = annot_col, main = "Country")
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
annot_col = data.frame(heat.df$country)
rownames(annot_col) = colnames(heat_num)
## Plot
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 5)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 5)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 10)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_rows = 10)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 10, clustering_method = "complete")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 10, clustering_method = "complete")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 3, clustering_method = "correlation")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 3, clustering_method = "ward")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 3, clustering_method = "ward.D2")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 3, clustering_method = "ward.D2")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 3, clustering_method = "average")
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "Country", cutree_cols = 3, clustering_method = "average")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col)
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col)
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 3, cellheight = 3, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "ARGs present in abundance of 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 3, cellheight = 3, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "ARGs present in abundance of 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
View(heat.df)
row.names(heat.df)
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
View(heat.df)
heat.t <- t(heat.df)
heat_num = as.matrix(heat.t[1:105,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
rownames(annot_col) = colnames(heat_num)
View(annot_col)
colnames(annot_col) <- c("country", "sample_type", "location")
rownames(annot_col) = colnames(heat_num)
View(annot_col)
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
heat.t <- t(heat.df)
heat_num = as.matrix(heat.t[1:105,])
class(heat_num) <- "numeric"
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
View(annot_col)
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
heat.t <- t(heat.df)
# Exclude annotation
heat_num = as.matrix(heat.t[1:105,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
ann_colors = list(
country = c(Burkina_Faso = "#EA1714", Benin="#2DBB35", Finland="#5BF6F4"),
sample_type = c(waste_water = "#1E8EC6", human_feces = "#B10D82", river_water= "A7E4F3", sludge = "black", sandy_sediment_sludge = "black", soil = "black", sediment_sludge = "black"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#EA1714", Benin="#2DBB35", Finland="#5BF6F4"),
sample_type = c(waste_water = "#1E8EC6", human_feces = "#B10D82", river_water= "A7E4F3", clean_water= "D5EDF3",sludge = "black", sandy_sediment_sludge = "black", soil = "black", sediment_sludge = "black"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#EA1714", Benin="#2DBB35", Finland="#5BF6F4"),
sample_type = c(waste_water = "#1E8EC6", human_feces = "#B10D82", river_water= "A7E4F3", clean_water= "D5EDF3", tap_water= "white", sludge = "black", sandy_sediment_sludge = "black", soil = "black", sediment_sludge = "black"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#EA1714", Benin="#2DBB35", Finland="#5BF6F4"),
sample_type = c(waste_water = "#1E8EC6", human_feces = "#B10D82", well_water = "grey", river_water= "A7E4F3", clean_water= "D5EDF3", tap_water= "white", sludge = "black", sandy_sediment_sludge = "black", soil = "black", sediment_sludge = "black"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#EA1714", Benin="#2DBB35", Finland="#5BF6F4"),
sample_type = c(waste_water = "#1E8EC6", human_feces = "#B10D82", well_water = "grey", river_water= "#A7E4F3", clean_water= "#D5EDF3", tap_water= "white", sludge = "black", sandy_sediment_sludge = "black", soil = "black", sediment_sludge = "black"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#9BFCF9", Benin="#FA788C", Finland="#AA60F9"),
sample_type = c(waste_water = "#ABFAF8", human_feces = "#B10D82", well_water = "grey", river_water= "#A7E4F3", clean_water= "#D5EDF3", tap_water= "white", sludge = "black", sandy_sediment_sludge = "black", soil = "black", sediment_sludge = "black"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#9BFCF9", Benin="#FA788C", Finland="#AA60F9"),
sample_type = c(waste_water = "black", human_feces = "#B10D82", well_water = "grey", river_water= "#A7E4F3", clean_water= "#D5EDF3", tap_water= "#ABFAF8", sludge = "white", sandy_sediment_sludge = "white", soil = "white", sediment_sludge = "white"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#FCAFA6", Benin="#60F975", Finland="#A6FCE2"),
sample_type = c(waste_water = "black", human_feces = "#B10D82", well_water = "grey", river_water= "#A7E4F3", clean_water= "#D5EDF3", tap_water= "#ABFAF8", sludge = "white", sandy_sediment_sludge = "white", soil = "white", sediment_sludge = "white"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
ann_colors = list(
country = c(Burkina_Faso = "#FCAFA6", Benin="#67F3D7", Finland="#CE8BFA"),
sample_type = c(waste_water = "black", human_feces = "#B10D82", well_water = "grey", river_water= "#A7E4F3", clean_water= "#D5EDF3", tap_water= "#A7F2D2", sludge = "white", sandy_sediment_sludge = "white", soil = "white", sediment_sludge = "white"))
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/crassphage_table.txt")
View(crassphage_table)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/crassphage_table.txt", row.names=NULL)
View(crassphage_table)
rownames(crassphage_table) <- c("count")
View(crassphage_table)
View(ARG_genemat)
View(metadata)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
mod_crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt")
View(mod_crassphage_table)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
mod_crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt")
View(mod_crassphage_table)
rownames(crassphage_table) <- c("count")
crassphage_norm <- t(t(crassphage_table)/metadata$total_seqs)
crassphage_table
metadata$total_seqs
str(metadata$total_seqs)
crassphage_norm <- t(t(crassphage_table)/metadata$total_seqs)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
crassphage_norm <- t(t(crassphage_table)/metadata$total_seqs)
crassphage_norm
identical(crassphage_table[2020, 4]/metadata$total_seqs[10], crassphage_norm[2020, 4])
identical(crassphage_table[20, 4]/metadata$total_seqs[10], crassphage_norm[20, 4])
identical(crassphage_table[20, 1]/metadata$total_seqs[10], crassphage_norm[20, 1])
identical(crassphage_table[20, 0]/metadata$total_seqs[10], crassphage_norm[20, 0])
identical(crassphage_table[1, 7]/metadata$total_seqs[10], crassphage_norm[1, 7])
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
identical(crassphage_table[1, 7]/metadata$total_seqs[1], crassphage_norm[1, 7])
identical(crassphage_table[1, 7]/metadata$total_seqs[7], crassphage_norm[1, 7])
identical(crassphage_table[2, 7]/metadata$total_seqs[7], crassphage_norm[2, 7])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
crassphage_norm <- t(t(crassphage_table)/metadata$total_seqs)
identical(crassphage_table[1, 7]/metadata$total_seqs[7], crassphage_norm[1, 7])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
crassphage_norm <- t(t(crassphage_table)/metadata$SSU_counts)
identical(crassphage_table[1, 7]/metadata$SSU_counts[7], crassphage_norm[1, 7])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
crassphage_norm <- t(t(crassphage_table)/metadata$total_seqs)
identical(crassphage_table[1, 7]/metadata$total_seqs[7], crassphage_norm[1, 7])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
View(crassphage_table)
View(metadata$total_seqs)
crassphage_table <- read.delim(t("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL))
crassphage_table <- t(crassphage_table)
crassphage_table
crassphage_norm <- crassphage_table/metadata$total_seqs
identical(crassphage_table[1, 7]/metadata$total_seqs[7], crassphage_norm[1, 7])
crassphage_norm
identical(crassphage_table[67, 1]/metadata$total_seqs[1], crassphage_norm[67, 1])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
crassphage_norm <- crassphage_table/metadata$SSU_counts
identical(crassphage_table[67, 1]/metadata$SSU_counts[1], crassphage_norm[67, 1])
rownames(crassphage_table) = rownames(crassphage_norm)
identical(crassphage_table[67, 1]/metadata$total_seqs[1], crassphage_norm[67, 1])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
rownames(crassphage_table) = rownames(crassphage_norm)
identical(crassphage_table[67, 1]/metadata$total_seqs[1], crassphage_norm[67, 1])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
crassphage_norm <- crassphage_table/metadata$total_seqs
identical(crassphage_table[67, 1]/metadata$total_seqs[1], crassphage_norm[67, 1])
??identical
identical(crassphage_table[67, 2]/metadata$total_seqs[2], crassphage_norm[67, 2])
View(crassphage_norm)
plot(crassphage_norm)
colnames(crassphage_norm) <- c("count")
rownames(crassphage_norm) <- c("country")
crassphage_norm$country <- metadata$country
crassphage_norm$country
View(crassphage_norm)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
View(crassphage_norm)
colnames(crassphage_norm) <- c("count")
View(crassphage_norm)
crassphage_norm$country <- metadata$country
View(crassphage_norm)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
# Add colnames
View(crassphage_norm)
colnames(crassphage_norm) <- c("count")
crassphage_norm$country <- data.frame(metadata$country)
View(crassphage_norm)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
# Add colnames
View(crassphage_norm)
colnames(crassphage_norm) <- c("count")
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
crass_PHY
plot_bar(crass_PHY, "count", fill="count", facet_grid=~country)
otu_table(crass_PHY)
tax_table(crass_PHY)
plot_bar(crass_PHY, "count", fill="sample_type", facet_grid=~location())
plot_bar(crass_PHY, "count", fill="sample_type", facet_grid=~location)
crass_PHY
otu_table(crass_PHY)
plot_bar(crass_PHY, "count")
plot_bar(crass_PHY)
plot_bar(crass_PHY, fill = "sample_type")
plot_bar(crass_PHY, fill = "sample_type")
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$SSU_counts
colnames(crassphage_norm) <- c("count")
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
plot_bar(crass_PHY, fill = "sample_type")
plot_bar(crass_PHY, fill = "sample_type")
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
colnames(crassphage_norm) <- c("count")
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
plot_bar(crass_PHY, fill = "sample_type")
plot_bar(crass_PHY, fill = "location")
plot_bar(crass_PHY, fill = "location")
plot_bar(crass_PHY, fill = "sample_type") + facet_grid( ~ location)
plot_bar(crass_PHY, fill = "sample_type") + facet_grid( ~ location)
crassphage_norm <- log10(crassphage_norm)
colnames(crassphage_norm) <- c("count")
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
plot_bar(crass_PHY, fill = "sample_type") + facet_grid( ~ location)
plot_bar(crass_PHY, fill = "sample_type") + facet_grid( ~ location)
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = TRUE), sample_data(metadata))
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
p22<-plot_bar(crass_PHY, fill="sample_type", "count")
p22
p22<-plot_bar(crass_PHY, fill="sample_type", "count")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22
p22<-plot_bar(crass_PHY, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
crass.p22
crass.p22
crass_PHY = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
crass_PHY_ast = subset_samples(crass_PHY, "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
crass_PHY_ast = subset_samples(crass_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
any(taxa_sums(crass_PHY_ast) == 0)
crass_PHY_ast <- prune_taxa(taxa_sums(crass_PHY_ast) > 0, crass_PHY_ast)
crass_PHY_ast
p22<-plot_bar(crass_PHY, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crassphage_norm_log <- log10(crassphage_norm)
crassphage_norm <- log10(crassphage_norm)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
crassphage_norm <- log10(crassphage_norm)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
colnames(crassphage_norm) <- c("count")
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
# Filter samples
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
crass_PHY = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Exclude suspicious samples
crass_PHY_ast = subset_samples(crass_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Plot
p22<-plot_bar(crass_PHY, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
# Load data (modified in excel to match metadata order)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
# Add colnames
colnames(crassphage_norm) <- c("count")
# log transform
crassphage_norm_log <- log10(crassphage_norm)
# Create phyloseq
crass_PHY<-phyloseq(otu_table(crassphage_norm_log, taxa_are_rows = FALSE), sample_data(metadata))
# Filter samples
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
crass_PHY = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Exclude suspicious samples
crass_PHY_ast = subset_samples(crass_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Plot
p22<-plot_bar(crass_PHY, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
# Load data (modified in excel to match metadata order)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
# Add colnames
colnames(crassphage_norm) <- c("count")
# log transform
crassphage_norm_log <- log10(crassphage_norm)
# Create phyloseq
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
# Filter samples
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
crass_PHY = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Exclude suspicious samples
crass_PHY_ast = subset_samples(crass_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Plot
p22<-plot_bar(crass_PHY, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
# Load data (modified in excel to match metadata order)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
# Add colnames
colnames(crassphage_norm) <- c("count")
# log transform
crassphage_norm_log <- log10(crassphage_norm)
# Create phyloseq
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
# Filter samples
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
crass_PHY = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Exclude suspicious samples
crass_PHY_ast = subset_samples(crass_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Plot
p22<-plot_bar(crass_PHY, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
# Filter samples
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
crass_PHY_q = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Exclude suspicious samples
crass_PHY_ast = subset_samples(crass_PHY_q, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Plot
p22<-plot_bar(crass_PHY, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
# Filter samples
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
crass_PHY = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Exclude suspicious samples
crass_PHY_ast = subset_samples(crass_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Plot
p22<-plot_bar(crass_PHY_ast, fill="sample_type")
crass.p22 <- p22 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p22 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
