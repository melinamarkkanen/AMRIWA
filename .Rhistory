resfinder_PHY = subset_samples(resfinder_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY) > 0, resfinder_PHY)
any(taxa_sums(resfinder_PHY)
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
library(DESeq2)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinderPHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
??phyloseq_to_deseq2
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~Savalou area)
View(metadata)
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~Clinique SOUKA)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Benin")
dds_arg_lu$location <- relevel(dds_arg_lu$location, "YES")
dds_arg_lu$location <- relevel(dds_arg_lu$location, "locatioj")
dds_arg_lu$location <- relevel(dds_arg_lu$location, "location")
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
View(dds_arg_lu)
View(ARGd)
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
View(ARG_DESEQ)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
estimateSizeFactors(dds_arg_lu, type = 'iterate')
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
estimateSizeFactors(dds_arg_lu, type = 'iterate')
metadata <-read.table("metadata.txt", sep="\t", header = T, row.names = 1, fill = 1)
# Load data
metaxa_genus <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/metaxa_genus.txt")
# Create OTU table
OTU_metaxa <- metaxa_genus[,-1]
# Create tax table
tax_table_metaxa <- data.frame(str_split_fixed(data.frame(metaxa_genus) [,1], ";", 6))
colnames(tax_table_metaxa) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus")
# Combine into phyloseq object
metaxa_PHY <- phyloseq(otu_table(OTU_metaxa, taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table_metaxa)), sample_data(metadata))
metadata$SSU_counts <- sample_sums(metaxa_PHY)
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
metaxa_PHY = subset_samples(metaxa_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
metaxa_PHY = subset_samples(metaxa_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Clear taxa that is not present in any of the remaining samples
any(taxa_sums(metaxa_PHY) == 0)
metaxa_PHY <- prune_taxa(taxa_sums(metaxa_PHY) > 0, metaxa_PHY)
any(taxa_sums(metaxa_PHY) == 0)
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Modify "resfinder.fasta" file so that only hits remain
## seqkit grep -f ARG_genes.txt resfinder.fasta > filtered_resfinder.fasta
# Check if there are correct number of lines
## grep ">" filtered_resfinder.fasta | wc -l
# Print out the gene lengths of these genes into file "lengths_resfinder.txt"
## cat filtered_resfinder.fasta | awk '$0 ~ ">" {if (NR > 1) {print c;} c=0;printf substr($0,2,100) "\t"; } $0 !~ ">" {c+=length($0);} END { print c; }' > lengths_resfinder.txt
# Reorder in excel to match with file "ARG_genemat_norm"
lengths_resfinder <-as.matrix(read.table("lengths_resfinder.txt", header= F, check.names = T, row.names = 1))
colnames(lengths_resfinder) <- c("Length")
# Divide by ResFinder hit gene lengths
ARG_length_norm <- ARG_genemat/lengths_resfinder[, 1]
# Divide by SSU counts and normalize to bacterial 16S rRNA length (1550)
ARG_genemat_norm <- t(t(ARG_length_norm)/metadata$SSU_counts) * 1550
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
resfinder_PHY = subset_samples(resfinder_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY) > 0, resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
estimateSizeFactors(dds_arg_lu, type = 'iterate')
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(diagdds, geoMeans = geoMeans)
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
ARGd <- ARG_genemat_norm[, ]
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
estimateSizeFactors(dds_PvsN, type = 'poscounts')
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
estimateSizeFactors(dds_arg_lu, type = 'poscounts')
any(is.na(counts(dds_arg_lu)))
estimateSizeFactors(dds_arg_lu, type = 'poscounts')
sum(dds_arg_lu)
sample_sums(dds_arg_lu)
sample_sums(ARG_DESEQ)
View(dds_arg_lu)
tax_table(as.matrix(tax_table_resfinder)))
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
ARGd <- ARG_genemat_norm[, ]
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
ARGd <- ARG_genemat_norm[, ] * 10^6 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
ARG_DESEQ <- subset_samples(ARG_DESEQ, sample_sums(ARG_DESEQ) != 0)
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
??DESeq
??fitType
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
ARGd <- ARG_genemat_norm[, ] * 10^10 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
View(ARGd)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
View(ARGd)
ARGd <- as.numeric(ARG_genemat_norm[, ] * 10^5 + 1)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Finland"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
View(dds_arg_lu)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Finland"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Finland"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~country)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
as.integer(as.matrix(ARGd))
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(dds_arg_lu), 1, gm_mean)
dds_arg_lu = estimateSizeFactors(dds_arg_lu, geoMeans = geoMeans)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
as.integer(as.matrix(ARGd))
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
mode(ARGd) <- "integer"
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
as.integer(as.matrix(ARGd))
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
as.integer(as.matrix(ARGd))
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
as.integer(as.nimeric(as.matrix(ARGd)))
as.integer(as.numeric(as.matrix(ARGd)))
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
as.integer(as.numeric(as.matrix(ARGd)))
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
ARGd <- ARG_genemat_norm[, ] * 10^5 + 1
as.numeric(as.matrix(ARGd))
ARG_DESEQ <- phyloseq(otu_table(resfinder_PHY, taxa_are_rows = T), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_DESEQ_LU <- subset_samples(ARG_DESEQ, (country == "Benin"))
dds_arg_lu = phyloseq_to_deseq2(ARG_DESEQ_LU, ~location)
dds_arg_lu$location <- relevel(dds_arg_lu$location, "Savalou area")
dds_arg_lu = DESeq(dds_arg_lu, fitType = "mean", test = "Wald", betaPrior = FALSE)
# Average 16S counts bu location
lo_data<-data.frame(SUM=round(mean(sample_data(resfinder_PHY)$SSU_counts)*(sample_sums(resfinder_PHY))), location=as.factor(sample_data(resfinder_PHY)$location))
plot(lo_data$SUM~lo_data$location, cex.axis=0.5, srt=45, las=2, xlab=NULL)
# Testing models to support the data
## Linear
model.ln<-lm(SUM~location, data=lo_data)
summary(model.ln)
shapiro.test(lo_data$SUM)
plot(model.ln)
# The p value is > 0.05 and differs significantly from normal distribution
## Log
model.logln<-lm(log(SUM)~location, data=lo_data)
summary(model.logln)
shapiro.test(log(lo_data$SUM))
plot(model.logln)
# P value 0.005464 but data not normally distributed. Also S shaped QQ plot reffering to overdispersion.
## Poisson
model.pois = glm(SUM ~ location , data = lo_data, family = poisson)
summary(model.pois)
plot(model.pois)
# P value <2e-16, Residual deviance: 65342438  on 75  degrees of freedom, AIC: 65343564.
## Quasipoisson
model.qpois<-glm(SUM~location, data=lo_data, family="quasipoisson")
summary(model.qpois)
plot(model.qpois)
## Negative binomial
model.nb <- glm.nb(SUM~location, data=lo_data)
summary(model.nb)
plot(model.nb)
# Summarize and compare models
data.frame(linear=coef(model.ln),
loglinear=exp(coef(model.logln)),
poisson=exp(coef(model.pois)),
qpoisson=exp(coef(model.qpois)),
negbin=exp(coef(model.nb)))
# Critical value
qchisq(0.95, df.residual(model.pois))
deviance(model.ln)
deviance(model.logln)
deviance(model.pois)
deviance(model.qpois)
deviance(model.nb)
# None of the models fits the data.
# Plot using neg. binom. model
lo_data<-data.frame(SUM=round(mean(sample_data(resfinder_PHY)$SSU_counts)*(sample_sums(resfinder_PHY))), location=as.factor(sample_data(resfinder_PHY)$location))
fit <- glm.nb(SUM ~ location, data = lo_data, link = log)
lo_data <- cbind(lo_data, Mean = predict(fit, newdata = lo_data, type = "response"), SE = predict(fit, newdata = lo_data, type = "response", se.fit = T)$se.fit)
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
ARG.sum.lo <- ggplot(lo_data, aes(x = location, y = Mean)) +
scale_fill_manual(values = mycolors) +
geom_line() + geom_jitter(data = lo_data, aes(x = location, y = SUM, color = location),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") + scale_y_log10()
# Extract outliers
lo_data<-data.frame(SUM=round(mean(sample_data(resfinder_PHY)$SSU_counts)*(sample_sums(resfinder_PHY))), location=as.factor(sample_data(resfinder_PHY)$location))
boxplot(lo_data$SUM)
boxplot(lo_data$SUM, plot=FALSE)$out
outliers <- boxplot(lo_data$SUM, plot=FALSE)$out
print(outliers)
# Exclude outliers
## where they at
lo_data[which(lo_data$SUM %in% outliers),]
## remove
lo_data <- lo_data[-which(lo_data$SUM %in% outliers),]
boxplot(lo_data$SUM)
# New  plot
fit <- glm.nb(SUM ~ location, data = lo_data, link = log)
lo_data <- cbind(lo_data, Mean = predict(fit, newdata = lo_data, type = "response"), SE = predict(fit, newdata = lo_data, type = "response", se.fit = T)$se.fit)
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
ARG.sum.lo_outl <- ggplot(lo_data, aes(x = location, y = Mean)) +
scale_fill_manual(values = mycolors) +
geom_line() + geom_jitter(data = lo_data, aes(x = location, y = SUM, color = location),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") + scale_y_log10()
plot_grid(ARG.sum.lo, ARG.sum.lo_outl)
library(cowplot)
plot_grid(ARG.sum.lo, ARG.sum.lo_outl)
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
resfinder_PHY = subset_samples(resfinder_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Suspicious samples (very high ARG level)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY) > 0, resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
# Plot using neg. binom. model
co_data<-data.frame(SUM=round(mean(sample_data(resfinder_PHY)$SSU_counts)*(sample_sums(resfinder_PHY))), country=as.factor(sample_data(resfinder_PHY)$country))
fit <- glm.nb(SUM ~ country, data = co_data, link = log)
co_data <- cbind(co_data, Mean = predict(fit, newdata = co_data, type = "response"), SE = predict(fit, newdata = co_data, type = "response", se.fit = T)$se.fit)
ARG.sum.co <- ggplot(co_data, aes(x = country, y = Mean)) +
scale_color_manual(values=c("#FF333F", "#35E0F5", "#531592")) +
geom_line() + geom_jitter(data = co_data, aes(x = country, y = SUM, color = country),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") + scale_y_log10()
# Extract outliers
co_data<-data.frame(SUM=round(mean(sample_data(resfinder_PHY)$SSU_counts)*(sample_sums(resfinder_PHY))), country=as.factor(sample_data(resfinder_PHY)$country))
boxplot(co_data$SUM)
boxplot(co_data$SUM, plot=FALSE)$out
outliers <- boxplot(co_data$SUM, plot=FALSE)$out
print(outliers)
# Exclude outliers
## where they at
co_data[which(co_data$SUM %in% outliers),]
## remove
co_data <- co_data[-which(co_data$SUM %in% outliers),]
boxplot(co_data$SUM)
# New  plot
fit <- glm.nb(SUM ~ country, data = co_data, link = log)
co_data <- cbind(co_data, Mean = predict(fit, newdata = co_data, type = "response"), SE = predict(fit, newdata = co_data, type = "response", se.fit = T)$se.fit)
ARG.sum.co_outl <- ggplot(co_data, aes(x = country, y = Mean)) +
scale_color_manual(values=c("#FF333F", "#35E0F5", "#531592")) +
geom_line() + geom_jitter(data = co_data, aes(x = country, y = SUM, color = country),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") + scale_y_log10()
plot_grid(ARG.sum.co, ARG.sum.co_outl)
# By location
lo_data<-data.frame(SUM=round(mean(sample_data(resfinder_PHY)$SSU_counts)*(sample_sums(resfinder_PHY))), location=as.factor(sample_data(resfinder_PHY)$location))
fit <- glm.nb(SUM ~ location, data = lo_data, link = log)
# Tukey's post hoc test
glht.mod <- glht(fit, mcp(location = "Tukey"))
summary(glht(glht.mod))
# By country
co_data<-data.frame(SUM=round(mean(sample_data(resfinder_PHY)$SSU_counts)*(sample_sums(resfinder_PHY))), country=as.factor(sample_data(resfinder_PHY)$country))
fit <- glm.nb(SUM ~ country, data = co_data, link = log)
# Tukey's post hoc test
glht.mod <- glht(fit, mcp(country = "Tukey"))
summary(glht(glht.mod))
Benin <- subset_samples(resfinder_PHY, (country == "Benin"))
Benin_dist <- vegdist(t(otu_table(Benin)), dist = "horn")
adonis(Benin_dist ~ location, data = data.frame(sample_data(Benin)), permutations = 99999)
BF <- subset_samples(resfinder_PHY, (country == "Burkina Faso"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(resfinder_PHY, (country == "Finland"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
# In Benin the ARG profile is explained by 21.2 % by the location. Whereas in Burkina Faso the same percentage is 20.5 %. In Finland the grouping by location is not significant.
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance gene") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
