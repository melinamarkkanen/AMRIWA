geom_point(size=3) + theme_classic()
resfinder.loc
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(Paired, "Dark2"))(nb.cols)
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(12, "Paired"))(nb.cols)
loc <- plot_richness(resfinder_PHY, measures = c("Shannon", "Simpson"), color="location", shape = "country")
resfinder.loc <- loc + geom_boxplot() +
scale_fill_manual(values=mycolors) +
geom_point(size=3) + theme_classic()
resfinder.loc
resfinder.loc
resfinder.in <- loc + geom_boxplot() +
scale_fill_manual(values=mycolors) +
geom_point(size=3) + theme_classic() + theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
resfinder.in
resfinder.in
resfinder.in <- loc + geom_boxplot() +
scale_fill_manual(values=mycolors) +
geom_point(size=3) + theme_classic() + theme(axis.text.x = element_text(angle = 90))
resfinder.in
resfinder.in
resfinder.in <- loc + geom_boxplot() +
scale_fill_manual(values=mycolors) +
geom_point(size=3) + theme_classic() + theme(axis.text.x = element_text(angle = 90, size = 0.5))
resfinder.in
resfinder.in
resfinder.in <- loc + geom_boxplot() +
scale_fill_manual(values=mycolors) +
geom_point(size=3) + theme_classic() + theme(axis.text.x = element_text(angle = 90, size =2))
resfinder.in
resfinder.in <- loc + geom_boxplot() +
scale_fill_manual(values=mycolors) +
geom_point(size=3) + theme_classic() + theme(axis.text.x = element_text(angle = 90, size =5))
resfinder.in
resfinder.in
resfinder.in <- loc + geom_boxplot() +
scale_fill_manual(values=mycolors) +
geom_point(size=3) + theme_linedraw() +
theme(axis.text.x = element_text(angle = 90, size =5))
resfinder.in
resfinder.in
metaxa_PHY_genus <- tax_glom(metaxa_PHY, "Genus")
metaxa_PHY_genus_abun <- prune_taxa(names(sort(taxa_sums(metaxa_PHY_genus), TRUE)[1:12]),
metaxa_PHY_genus)
# Transform_1
metaxa_PHY_genus_abun_trans <- transform_sample_counts(metaxa_PHY_genus_abun, function(x) x / sum(x))
# Merge by location
metaxa_mrg_loc <- merge_samples(metaxa_PHY_genus_abun_trans, "location")
# Transform_2
metaxa_mrg_loc_trans <- transform_sample_counts(metaxa_mrg_loc, function(x) x / sum(x))
# Normalize by sample number / location
otu_table(metaxa_mrg_loc_trans) <- otu_table(metaxa_mrg_loc_trans)[, ]/as.matrix(table(sample_data(metaxa_PHY)$location))[,
1]
# Set colors
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Accent"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
metaxa.p14 <- plot_bar(metaxa_mrg_loc_trans, fill = "Genus", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Genus"))
metaxa.p14
metaxa.p14
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Paired"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
metaxa.p14 <- plot_bar(metaxa_mrg_loc_trans, fill = "Genus", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Genus"))
metaxa.p14
metaxa.p14
# Load data
metaphlan.com <- metaphlan_PHY
taxic_metaphlan <- as.data.frame(metaphlan.com@tax_table)
# Add OTU ids
taxic_metaphlan$OTU <- rownames(taxic_metaphlan)
colnames(taxic_metaphlan)
# Convert into a matrix.
taxmat_metaphlan <- as.matrix(taxic_metaphlan)
# Convert into phyloseq compatible file.
new.tax_metaphlan <- tax_table(taxmat_metaphlan)
# Incroporate into new phyloseq object
tax_table(metaphlan.com) <- new.tax_metaphlan
# Class level
metaphlan_top6class <- aggregate_top_taxa(metaphlan.com, top = 6, "Class")
metaphlan_top6class <- aggregate_top_taxa(metaphlan_PHY, top = 6, "Class")
metaphlan.com <- metaphlan_PHY
taxic_metaphlan <- as.data.frame(metaphlan.com@tax_table)
taxic_metaphlan$OTU <- rownames(taxic_metaphlan)
colnames(taxic_metaphlan)
taxmat_metaphlan <- as.matrix(taxic_metaphlan)
new.tax_metaphlan <- tax_table(taxmat_metaphlan)
tax_table(metaphlan.com) <- new.tax_metaphlan
metaphlan_top6class <- aggregate_top_taxa(metaphlan.com, top = 6, "Class")
View(metaphlan.com)
# Load data
metaxa.com <- metaxa_PHY
taxic_metaxa <- as.data.frame(metaxa.com@tax_table)
# Add OTU ids
taxic_metaxa$OTU <- rownames(taxic_metaxa)
colnames(taxic_metaxa)
# Convert into a matrix.
taxmat_metaxa <- as.matrix(taxic_metaxa)
# Convert into phyloseq compatible file.
new.tax_metaxa <- tax_table(taxmat_metaxa)
# Incroporate into new phyloseq object
tax_table(metaxa.com) <- new.tax_metaxa
# Class level
metaxa_top6class <- aggregate_top_taxa(metaxa.com, top = 6, "Class")
metaxa_top6class <- aggregate_top_taxa(metaxa.com, top = 6, "Class")
View(metaxa.com)
metaxa_top6class <- aggregate_top_taxa(metaxa.com, top = 3, "Class")
metaxa_top6class <- aggregate_top_taxa(metaxa.com, top = 4, "Class")
metaxa_top6class <- aggregate_top_taxa(metaxa.com, top = 5, "Class")
metaxa_top6class <- aggregate_top_taxa(metaxa.com, top = 6, "Class")
metaxa_top5class <- aggregate_top_taxa(metaxa.com, top = 5, "Genus")
# Add OTU ids
taxic_metaxa$OTU <- rownames(taxic_metaxa)
colnames(taxic_metaxa)
# Convert into a matrix.
taxmat_metaxa <- as.matrix(taxic_metaxa)
# Convert into phyloseq compatible file.
new.tax_metaxa <- tax_table(taxmat_metaxa)
# Incroporate into new phyloseq object
tax_table(metaxa.com) <- new.tax_metaxa
# Class level
metaxa_top5class <- aggregate_top_taxa(metaxa.com, top = 5, "Class")
metaxa_top5class.rel <- microbiome::transform(metaxa_top6class, "compositional")
metaxa_top5class.p13 <- plot_composition(metaxa_top5class.rel, group_by = "country") +
theme(legend.position = "bottom") + theme_classic() +
theme(axis.text.x = element_text(angle = 90, size = 8), axis.title = element_blank()) +
ggtitle("Relative abundance of top 6 classes, Metaxa2")
metaxa_top6class.p13 +
scale_fill_manual(values = c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02", "#FFFFFF"))
metaxa_top5class.p13 +
scale_fill_manual(values = c("#1B9E77","#D95F02","#7570B3","#E7298A","#66A61E","#E6AB02", "#FFFFFF"))
metaxa_top5class.p13 +
scale_fill_manual(values = c("#1B9E77","#E6AB02","#7570B3","#E7298A","#66A61E", "#FFFFFF"))
# Load data
metaphlan.com <- metaphlan_PHY
taxic_metaphlan <- as.data.frame(metaphlan.com@tax_table)
# Add OTU ids
taxic_metaphlan$OTU <- rownames(taxic_metaphlan)
colnames(taxic_metaphlan)
# Convert into a matrix.
taxmat_metaphlan <- as.matrix(taxic_metaphlan)
# Convert into phyloseq compatible file.
new.tax_metaphlan <- tax_table(taxmat_metaphlan)
# Incroporate into new phyloseq object
tax_table(metaphlan.com) <- new.tax_metaphlan
# Class level
metaphlan_top5class <- aggregate_top_taxa(metaphlan.com, top = 5, "Class")
metaphlan_top5class <- aggregate_top_taxa(metaphlan.com, top = 4, "Class")
metaphlan_top5class <- aggregate_top_taxa(metaphlan.com, top = 3, "Class")
metaphlan_top5class <- aggregate_top_taxa(metaphlan.com, top = 2, "Class")
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
metaphlan_PHY_genus <- tax_glom(metaphlan_PHY, "Genus")
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaphlan
metaxa_rel_PHY <- transform_sample_counts(metaxa_PHY, function(x) x/sum(x))
metaxa_rel_PHY_genus <- tax_glom(metaxa_rel_PHY, "Genus")
metaxa_rel_PHY <- transform_sample_counts(metaxa_PHY, function(x) x/sum(x))
metaxa_rel_PHY_genus <- tax_glom(metaxa_rel_PHY, "Genus")
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaphlan
heat.metaxa <- plot_taxa_heatmap(metaxa_rel_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
knitr::opts_chunk$set(echo = TRUE)
heat.metaxa <- plot_taxa_heatmap(metaxa_rel_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
library(phyloseq)
source("https://raw.githubusercontent.com/mahendra-mariadassou/phyloseq-extended/master/load-extra-functions.R")
library(dplyr)
library(viridis)
library(stringr)
library(vegan)
library(RColorBrewer)
library(BiocManager)
BiocManager::install("microbiome")
library(microbiome)
library(microbiomeutilities)
library(ggplot2)
library(knitr)
library(ggpubr)
library(pheatmap)
library(ape)
library(multcomp)
heat.metaxa <- plot_taxa_heatmap(metaxa_rel_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaphlan
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa <- plot_taxa_heatmap(metaxa_rel_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
??plot_taxa_heatmap
heat.metaxa <- plot_taxa_heatmap(metaxa_rel_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaphlan
plot_taxa_heatmap
heat.metaxa
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaxa
??transformation
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "identity",
cluster_cols = T)
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "compositional",
cluster_cols = T)
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "compositional",
cluster_cols = T)
heat.metaxa
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10p",
cluster_cols = T)
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "compositional",
cluster_cols = T)
heat.metaphlan
heat.metaxa <- plot_taxa_heatmap(metaxa_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "compositional",
cluster_cols = T)
heat.metaxa
heat.metaphlan <- plot_taxa_heatmap(metaphlan_PHY_genus,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "compositional",
cluster_cols = T)
heat.metaphlan
heat.metaphlan
heat.metaphlan
# Reduce size
metaxa_PHY_abun <- core(metaxa_rel_PHY, detection = 10, prevalence = 20 / 89)
# Reduce size
metaxa_PHY_abun <- core(metaxa_PHY, detection = 10, prevalence = 20 / 89)
metaxa_box <- plot_taxa_boxplot(metaxa_PHY_abun,
taxonomic.level = "Genus",
top.otu = 12, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaxa_box <- plot_taxa_boxplot(metaxa_PHY_abun,
taxonomic.level = "Class",
top.otu = 12, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaxa_box <- plot_taxa_boxplot(metaxa_PHY_abun,
taxonomic.level = "Class",
top.otu = 5, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
print(metaxa_box)
metaphlan_box <- plot_taxa_boxplot(metaphlan_PHY_genus,
taxonomic.level = "Class",
top.otu = 5, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaphlan_box <- plot_taxa_boxplot(metaphlan_PHY_genus,
taxonomic.level = "Class",
top.otu = 3, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaphlan_PHY_abun <- core(metaphlan_PHY, detection = 10, prevalence = 20 / 89)
metaphlan_box <- plot_taxa_boxplot(metaphlan_PHY_genus,
taxonomic.level = "Class",
top.otu = 5, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaphlan_box <- plot_taxa_boxplot(metaphlan_PHY_abun,
taxonomic.level = "Class",
top.otu = 5, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaphlan_PHY_abun <- core(metaphlan_PHY, detection = 10, prevalence = 20 / 86)
metaphlan_box <- plot_taxa_boxplot(metaphlan_PHY_abun,
taxonomic.level = "Class",
top.otu = 5, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaphlan_box <- plot_taxa_boxplot(metaphlan_PHY_abun,
taxonomic.level = "Class",
top.otu = 3, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
metaphlan_box <- plot_taxa_boxplot(metaphlan_PHY_abun,
taxonomic.level = "Class",
top.otu = 2, VariableA = "country",
title = "Relative abudance plot", color = "Dark2")
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
View(resfinder_taxa)
resfinder_PHY = subset_taxa(resfinder_PHY, Class=="Betalactams")
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Modify "resfinder.fasta" file so that only hits remain
## seqkit grep -f ARG_genes.txt resfinder.fasta > filtered_resfinder.fasta
# Check if there are correct number of lines
## grep ">" filtered_resfinder.fasta | wc -l
# Print out the gene lengths of these genes into file "lengths_resfinder.txt"
## cat filtered_resfinder.fasta | awk '$0 ~ ">" {if (NR > 1) {print c;} c=0;printf substr($0,2,100) "\t"; } $0 !~ ">" {c+=length($0);} END { print c; }' > lengths_resfinder.txt
# Reorder in excel to match with file "ARG_genemat_norm"
lengths_resfinder <-as.matrix(read.table("lengths_resfinder.txt", header= F, check.names = T, row.names = 1))
colnames(lengths_resfinder) <- c("Length")
# Divide by ResFinder hit gene lengths
ARG_length_norm <- ARG_genemat/lengths_resfinder[, 1]
# Divide by SSU counts and normalize to bacterial 16S rRNA length (1550)
ARG_genemat_norm <- t(t(ARG_length_norm)/metadata$SSU_counts) * 1550
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
resfinder_PHY = subset_samples(resfinder_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Suspicious samples (very high ARG level)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY) > 0, resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
View(tax_tablea_resfinder)
View(tax_tablel_resfinder)
View(tax_table_resfinder)
resfinder_PHY_betalactams = subset_taxa(resfinder_PHY, Class=="Betalactam")
resfinder_PHY_betalactams = prune_samples(sample_sums(resfinder_PHY_betalactams)>=20, resfinder_PHY_betalactams)
resfinder_PHY_betalactams_Gene <- tax_glom(resfinder_PHY_betalactams, "Gene")
resfinder_PHY_betalactams_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_betalactams_Gene), TRUE)[1:12]),
resfinder_PHY_betalactams_Gene)
p <- plot_bar(resfinder_PHY_betalactams_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Betalactam gene") + ylab("Sum abundance/16S") + xlab("")
p
resfinder_PHY_betalactams_Gene_abund <- subset_samples(resfinder_PHY_betalactams_Gene_abund, sample_sums(resfinder_PHY_betalactams_Gene_abund) !=
0)
otu_table(resfinder_PHY_betalactams_Gene_abund) <- (otu_table(resfinder_PHY_betalactams_Gene_abund)[, ]/as.matrix(table(sample_data(resfinder_PHY_betalactams_Gene_abund)$location))[,
1])
p <- plot_bar(resfinder_PHY_betalactams_Gene_abund, fill = "Gene", "location")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Betalactam gene") + ylab("Sum abundance/16S") + xlab("")
p
p
resfinder_PHY_betalactams = subset_taxa(resfinder_PHY, Class=="Aminoglycosides")
resfinder_PHY_betalactams = subset_taxa(resfinder_PHY, Class=="Aminoglycoside")
resfinder_PHY_betalactams_Gene <- tax_glom(resfinder_PHY_betalactams, "Gene")
# Top12
resfinder_PHY_betalactams_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_betalactams_Gene), TRUE)[1:12]),
resfinder_PHY_betalactams_Gene)
# Clean
resfinder_PHY_betalactams_Gene_abund <- subset_samples(resfinder_PHY_betalactams_Gene_abund, sample_sums(resfinder_PHY_betalactams_Gene_abund) !=
0)
# Normalize by sample number
otu_table(resfinder_PHY_betalactams_Gene_abund) <- (otu_table(resfinder_PHY_betalactams_Gene_abund)[, ]/as.matrix(table(sample_data(resfinder_PHY_betalactams_Gene_abund)$location))[,
1])
p <- plot_bar(resfinder_PHY_betalactams_Gene_abund, fill = "Gene", "location")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Betalactam gene") + ylab("Sum abundance/16S") + xlab("")
p
p
