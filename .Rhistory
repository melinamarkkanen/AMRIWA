#write.table(ARG_genemat, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=T, sep = "\t", col.names = T)
#ARG_genemat_counts <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=NULL)
#ARG_genemat_counts$row.names<-NULL
resfinder_PHY_testi <- phyloseq(otu_table(ARG_genemat, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
write.table(ARG_genemat, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=T, sep = "\t", col.names = T)
ARG_genemat_counts <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=NULL)
ARG_genemat_counts$row.names<-NULL
resfinder_PHY_nonnorm <- phyloseq(otu_table(ARG_genemat_counts, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
dds.data = phyloseq_to_deseq2(resfinder_PHY_nonnorm, ~country)
dds = DESeq(dds.data)
library(DESeq2)
dds = DESeq(dds.data)
res = results(dds)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.01
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"),
as(tax_table(resfinder_PHY_nonnorm)[rownames(sigtab), ], "matrix"))
head(sigtab)
resfinder_PHY_nonnorm = subset_samples(resfinder_PHY_nonnorm, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
resfinder_PHY_nonnorm_ww = subset_samples(resfinder_PHY_nonnorm, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
resfinder_PHY_nonnorm = subset_samples(resfinder_PHY_nonnorm, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
resfinder_PHY_nonnorm_ww = subset_samples(resfinder_PHY_nonnorm, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Or alternatively include fecal but exclude suspicious samples
# resfinder_PHY_ast = subset_samples(resfinder_PHY, "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Suspicious samples (very high ARG level) (BH02_S77, BH27_S92, BH30_S94)
resfinder_PHY_nonnorm_clean = subset_samples(resfinder_PHY_nonnorm_ww, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY_nonnorm_clean) == 0)
resfinder_PHY_nonnorm_clean <- prune_taxa(taxa_sums(resfinder_PHY_nonnorm_clean) > 0, resfinder_PHY_nonnorm_clean)
any(taxa_sums(resfinder_PHY_nonnorm_clean) == 0)
# Deseq
dds.data = phyloseq_to_deseq2(resfinder_PHY_nonnorm_clean, ~location)
dds = DESeq(dds.data)
res = results(dds)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.01
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"),
as(tax_table(resfinder_PHY_nonnorm_clean)[rownames(sigtab), ], "matrix"))
head(sigtab)
resfinder_PHY_betalactams = subset_taxa(resfinder_PHY_clean, Class=="Betalactam")
resfinder_PHY_betalactams_Gene <- tax_glom(resfinder_PHY_betalactams, "Gene")
# Top12
resfinder_PHY_betalactams_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_betalactams_Gene), TRUE)[1:12]), resfinder_PHY_betalactams_Gene)
# Remove samples with none of these
resfinder_PHY_betalactams_Gene_abund <- subset_samples(resfinder_PHY_betalactams_Gene_abund, sample_sums(resfinder_PHY_betalactams_Gene_abund) !=
0)
# Normalize by sample number in each country
otu_table(resfinder_PHY_betalactams_Gene_abund) <- (otu_table(resfinder_PHY_betalactams_Gene_abund)[, ]/as.matrix(table(sample_data(resfinder_PHY_betalactams_Gene_abund)$country))[,
1])
p19<-plot_bar(resfinder_PHY_betalactams_Gene_abund, x="name", fill="Gene")
resfinder.p19 <- p19 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum of relative abundances of top 12 betalactams/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p19 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
resfinder.p19 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
dds.data = phyloseq_to_deseq2(resfinder_PHY_nonnorm_clean, ~country)
dds = DESeq(dds.data)
res = results(dds)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.01
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"),
as(tax_table(resfinder_PHY_nonnorm_clean)[rownames(sigtab), ], "matrix"))
head(sigtab)
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
plotDispEsts(dds)
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Family))
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Class))
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Gene))
head(sigtab)
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Gene))
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Gene))
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Gene, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Gene = factor(as.character(sigtabgen$Gene), levels=names(x))
ggplot(sigtabgen, aes(y=Gene, x=log2FoldChange, color=Gene)) +
geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Class))
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Gene, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Class = factor(as.character(sigtabgen$Class), levels=names(x))
ggplot(sigtabgen, aes(y=Class, x=log2FoldChange, color=Class)) +
geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggplot(sigtabgen, aes(y=Gene, x=log2FoldChange, color=Class)) +
geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Family))
theme_set(theme_bw())
sigtabgen = subset(sigtab, !is.na(Gene))
# Class order
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Class, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Class = factor(as.character(sigtabgen$Class), levels=names(x))
# Gene order
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Gene, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Gene = factor(as.character(sigtabgen$Gene), levels=names(x))
ggplot(sigtabgen, aes(y=Gene, x=log2FoldChange, color=Class)) +
geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
p <- ggplot(sigtabgen, aes(y=Gene, x=log2FoldChange, color=Class)) +
geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
p
knitr::opts_chunk$set(echo = TRUE)
library(phyloseq)
library(dplyr)
library(viridis)
library(stringr)
library(vegan)
library(RColorBrewer)
library(BiocManager)
BiocManager::install("microbiome")
library(microbiome)
library(microbiomeutilities)
library(ggplot2)
library(knitr)
library(ggpubr)
library(pheatmap)
library(ape)
library(multcomp)
metadata <-read.table("metadata.txt", sep="\t", header = T, row.names = 1, fill = 1)
# Load data
metaxa_genus <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/metaxa_genus.txt")
# Create OTU table
OTU_metaxa <- metaxa_genus[,-1]
# Create tax table
tax_table_metaxa <- data.frame(str_split_fixed(data.frame(metaxa_genus) [,1], ";", 6))
colnames(tax_table_metaxa) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus")
# Combine into phyloseq object
metaxa_PHY <- phyloseq(otu_table(OTU_metaxa, taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table_metaxa)), sample_data(metadata))
# Exclude Unknown
metaxa_PHY <- subset_taxa(metaxa_PHY, !Domain %in% c("Unknown"))
metadata$SSU_counts <- sample_sums(metaxa_PHY)
# Create extra column for Eucaryota, might be interesting to check out later
metaxa_PHY_temp <- subset_taxa(metaxa_PHY, !Domain %in% c("Unknown", "Bacteria", "Archaea", "Mitochondria", "Chloroplast"))
metadata$SSU_eucaryota <- sample_sums(metaxa_PHY_temp)
# With low quality (BFH24_S142, BH63_S118, FH10_S171), do at least this.
metaxa_PHY = subset_samples(metaxa_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
metaxa_PHY_ww = subset_samples(metaxa_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Or alternatively include fecal but exclude suspicious samples
# metaxa_PHY_ast = subset_samples(metaxa_PHY, "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Suspicious samples (very high ARG level)
metaxa_PHY_clean = subset_samples(metaxa_PHY_ww, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Clear taxa that are not present in any of the remaining samples
any(taxa_sums(metaxa_PHY_clean) == 0)
metaxa_PHY_clean <- prune_taxa(taxa_sums(metaxa_PHY_clean) > 0, metaxa_PHY_clean)
any(taxa_sums(metaxa_PHY_clean) == 0)
# Change into relative data
metaxa_rel_PHY <- transform_sample_counts(metaxa_PHY_clean, function(x) x/sum(x))
# Ordinate and plot data
metaxa_rel_PHY_ord <- ordinate(metaxa_rel_PHY, method = "PCoA", distance = "horn")
p1 <- plot_ordination(metaxa_rel_PHY, metaxa_rel_PHY_ord, color = "country", label = "name")
metaxa.p1 <- p1 + scale_color_manual(values=c("#FF333F", "#35E0F5", "#531592")) + geom_point(colour = "black",
pch = 21, size = 2, alpha = 0.5) + stat_ellipse(level = 0.95, linetype = 1) +
theme_minimal() + labs(title = "Metaxa2")
metaxa.p1
# Test significance using pair-wise adonis
metaxa_temp <- subset_samples(metaxa_PHY_clean, (country == "Benin" | country == "Finland"))
metaxa_dist <- vegdist(t(otu_table(metaxa_temp)), dist = "horn")
adonis(metaxa_dist ~ country, data = data.frame(sample_data(metaxa_temp), permutations = 9999))
metaxa_temp <- subset_samples(metaxa_PHY_clean, (country == "Burkina Faso" | country == "Finland"))
metaxa_dist <- vegdist(t(otu_table(metaxa_temp)), dist = "horn")
adonis(metaxa_dist ~ country, data = data.frame(sample_data(metaxa_temp), permutations = 9999))
metaxa_temp <- subset_samples(metaxa_PHY_clean, (country == "Benin" | country == "Burkina Faso"))
metaxa_dist <- vegdist(t(otu_table(metaxa_temp)), dist = "horn")
adonis(metaxa_dist ~ country, data = data.frame(sample_data(metaxa_temp), permutations = 9999))
# Finnish samples seems to harbour more distinct taxonomic dibversity than those of Benin (R2=16.7%, p=0.001) and Burkina Faso (R2=9.6 %, p=0.001). Instead There is little grouping by country between Benin and Burkina Faso.
# Modify data in command-line to match sample names in metadata file
## tr '|' ';' <merged_abundance_table.txt > mod_merged_abundance_table.txt
## sed -i 's/_profile//g' mod_merged_abundance_table.txt
## sed -i 's/BFH38-A_S156/BFH38.A_S156/g' mod_merged_abundance_table.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_merged_abundance_table.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_merged_abundance_table.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_merged_abundance_table.txt
# Load data
metaphlan <- as.matrix(read.table("mod_merged_abundance_table.txt", fill = 1, header = T, check.names = F))
# Exclude the first column "NCBI_tax_id"
metaphlan <- subset(metaphlan, select = -c(NCBI_tax_id))
# Create OTU table
OTU_metaphlan <- metaphlan[,-1]
# Change values as numeric
class(OTU_metaphlan) <- "numeric"
# Create tax_table
tax_table_metaphlan <- data.frame(str_split_fixed(data.frame(metaphlan) [,1], ";", 7))
colnames(tax_table_metaphlan) <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
# Clean "*__"
tax_table_metaphlan <- apply(tax_table_metaphlan, 2, function(y) (gsub(".__", "", y)))
# Combine into phyloseq object
metaphlan_PHY <- phyloseq(otu_table(OTU_metaphlan, taxa_are_rows = TRUE), tax_table(as.matrix(tax_table_metaphlan)), sample_data(metadata))
# Virus
metaphlan_PHY <- subset_taxa(metaphlan_PHY, Kingdom != "Virus")
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
metaphlan_PHY = subset_samples(metaphlan_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
metaphlan_PHY_ww = subset_samples(metaphlan_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Or alternatively include fecal but exclude suspicious samples
# metaphlan_PHY_ast = subset_samples(metaphlan_PHY, "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Suspicious samples (very high ARG level)
metaphlan_PHY_clean = subset_samples(metaphlan_PHY_ww, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Clear taxa that is not present in any of the remaining samples
any(taxa_sums(metaphlan_PHY_clean) == 0)
metaphlan_PHY_clean <- prune_taxa(taxa_sums(metaphlan_PHY_clean) > 0, metaphlan_PHY_clean)
any(taxa_sums(metaphlan_PHY_clean) == 0)
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Save counts without gene names
#write.table(ARG_genemat, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=T, sep = "\t", col.names = T)
#ARG_genemat_counts <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=NULL)
#ARG_genemat_counts$row.names<-NULL
# Modify "resfinder.fasta" file so that only hits remain
## seqkit grep -f ARG_genes.txt resfinder.fasta > filtered_resfinder.fasta
# Check if there are correct number of lines
## grep ">" filtered_resfinder.fasta | wc -l
# Print out the gene lengths of these genes into file "lengths_resfinder.txt"
## cat filtered_resfinder.fasta | awk '$0 ~ ">" {if (NR > 1) {print c;} c=0;printf substr($0,2,100) "\t"; } $0 !~ ">" {c+=length($0);} END { print c; }' > lengths_resfinder.txt
# Reorder in excel to match with file "ARG_genemat_norm"
lengths_resfinder <-as.matrix(read.table("lengths_resfinder.txt", header= F, check.names = T, row.names = 1))
colnames(lengths_resfinder) <- c("Length")
# Divide by ResFinder hit gene lengths
#ARG_length_norm <- ARG_genemat/lengths_resfinder[, 1]
# Divide by SSU counts and normalize to bacterial 16S rRNA length (1550)
ARG_genemat_norm <- t(t(ARG_length_norm)/metadata$SSU_counts) * 1550
# Divide by ResFinder hit gene lengths
ARG_length_norm <- ARG_genemat/lengths_resfinder[, 1]
# Divide by SSU counts and normalize to bacterial 16S rRNA length (1550)
ARG_genemat_norm <- t(t(ARG_length_norm)/metadata$SSU_counts) * 1550
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# Have a quick look
plot_bar(otu_table(resfinder_PHY))
# There are the suspicious samples (BH02, BH27, BH30).
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
resfinder_PHY_ww = subset_samples(resfinder_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Or alternatively include fecal but exclude suspicious samples
# resfinder_PHY_ast = subset_samples(resfinder_PHY, "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Suspicious samples (very high ARG level) (BH02_S77, BH27_S92, BH30_S94)
resfinder_PHY_clean = subset_samples(resfinder_PHY_ww, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY_clean) == 0)
resfinder_PHY_clean <- prune_taxa(taxa_sums(resfinder_PHY_clean) > 0, resfinder_PHY_clean)
any(taxa_sums(resfinder_PHY_clean) == 0)
# Ordinate and plot data
resfinder_PHY_ord <- ordinate(resfinder_PHY_clean, method = "PCoA", distance = "horn")
p3 <- plot_ordination(resfinder_PHY_clean, resfinder_PHY_ord, color = "country", label = "name")
resfinder.p3 <- p3 + scale_color_manual(values=c("#FF333F", "#35E0F5", "#531592")) +
geom_point(colour = "black", pch = 21, size = 2, alpha = 0.5) + stat_ellipse(level = 0.95, linetype = 1) +
theme_minimal() + labs(title = "ResFinder")
resfinder.p3
# Test significance between all pairs
resfinder_temp <- subset_samples(resfinder_PHY_clean, (country == "Finland" | country == "Benin"))
resfinder_dist <- vegdist(t(otu_table(resfinder_temp)), dist = "horn")
adonis(resfinder_dist ~ country, data = data.frame(sample_data(resfinder_temp), permutations = 9999))
resfinder_temp <- subset_samples(resfinder_PHY_clean, (country == "Burkina Faso" | country == "Benin"))
resfinder_dist <- vegdist(t(otu_table(resfinder_temp)), dist = "horn")
adonis(resfinder_dist ~ country, data = data.frame(sample_data(resfinder_temp), permutations = 9999))
resfinder_temp <- subset_samples(resfinder_PHY_clean, (country == "Finland" | country == "Burkina Faso"))
resfinder_dist <- vegdist(t(otu_table(resfinder_temp)), dist = "horn")
adonis(resfinder_dist ~ country, data = data.frame(sample_data(resfinder_temp), permutations = 9999))
# Between Benin and Finland, country explains 11.5 % (p=0.001) of the divergence in the resistome. Between BF and Finland the same is 12.6 % (p=0.001).
resfinder_PHY_ord <- ordinate(resfinder_PHY_clean, method = "PCoA", distance = "horn")
p3.1 <- plot_ordination(resfinder_PHY_clean, resfinder_PHY_ord, color = "location", label = "name")
resfinder.p3.1 <- p3.1 + scale_color_brewer(palette = "Paired") +
geom_point(colour = "black", pch = 21, size = 2, alpha = 0.5) + stat_ellipse(level = 0.95, linetype = 1) +
theme_minimal() + labs(title = "ResFinder")
resfinder.p3.1
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(12, "Dark2"))(nb.cols)
resfinder_PHY_ord <- ordinate(resfinder_PHY_clean, method = "PCoA", distance = "horn")
p3.1 <- plot_ordination(resfinder_PHY_clean, resfinder_PHY_ord, color = "location", label = "name")
resfinder.p3.1 <- p3.1 + scale_fill_manual(values = mycolors) +
geom_point(colour = "black", pch = 21, size = 2, alpha = 0.5) + stat_ellipse(level = 0.95, linetype = 1) +
theme_minimal() + labs(title = "ResFinder")
resfinder.p3.1
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
resfinder_PHY_ord <- ordinate(resfinder_PHY_clean, method = "PCoA", distance = "horn")
p3.1 <- plot_ordination(resfinder_PHY_clean, resfinder_PHY_ord, color = "location", label = "name")
resfinder.p3.1 <- p3.1 + scale_fill_manual(values = mycolors) +
geom_point(colour = "black", pch = 21, size = 2, alpha = 0.5) + stat_ellipse(level = 0.95, linetype = 1) +
theme_minimal() + labs(title = "ResFinder")
resfinder.p3.1
resfinder_temp <- subset_samples(resfinder_PHY_clean, (country == "Savalou area" | country == "Central clinic of Calavi"))
resfinder_temp <- subset_samples(resfinder_PHY_clean, (location == "Savalou area" | location == "Central clinic of Calavi"))
resfinder_dist <- vegdist(t(otu_table(resfinder_temp)), dist = "horn")
adonis(resfinder_dist ~ location, data = data.frame(sample_data(resfinder_temp), permutations = 9999))
div.location <- levels(resfinder.meta$location)
View(div.location)
div.location <- levels(resfinder.meta$location)
location.pairs <- combn(seq_along(div.location), 2, simplify = FALSE, FUN = function(i)div.location[i])
print(location.pairs)
resfinder_temp <- subset_samples(resfinder_PHY_clean, (location.pairs))
# Average 16S counts by location
mean16S_counts <- mean(metadata$SSU_counts, invert = TRUE)
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_clean)))),
location = sample_data(resfinder_PHY_clean)$location)
plot(lo_data$SUM~lo_data$location, cex.axis=0.5, srt=45, las=2, xlab=NULL)
# Testing models to support the data
## Linear
model.ln<-lm(SUM~location, data=lo_data)
summary(model.ln)
shapiro.test(lo_data$SUM)
plot(model.ln)
# The p value is > 0.05 and differs significantly from normal distribution
## Log
model.logln<-lm(log(SUM)~location, data=lo_data)
summary(model.logln)
shapiro.test(log(lo_data$SUM))
plot(model.logln)
# The p value is > 0.05 and differs significantly from normal distribution
## Poisson
model.pois = glm(SUM ~ location , data = lo_data, family = poisson)
summary(model.pois)
plot(model.pois)
## Quasipoisson
model.qpois<-glm(SUM~location, data=lo_data, family="quasipoisson")
summary(model.qpois)
plot(model.qpois)
## Negative binomial
model.nb <- glm.nb(SUM~location, data=lo_data)
summary(model.nb)
plot(model.nb)
# Summarize and compare models
data.frame(linear=coef(model.ln),
loglinear=exp(coef(model.logln)),
poisson=exp(coef(model.pois)),
qpoisson=exp(coef(model.qpois)),
negbin=exp(coef(model.nb)))
# Critical value
qchisq(0.95, df.residual(model.pois))
deviance(model.ln)
deviance(model.logln)
deviance(model.pois)
deviance(model.qpois)
deviance(model.nb)
# None of the models fits the data. However, negative binominal model gets the closest.
# Plot using neg. binom. model
fit <- glm.nb(SUM ~ location, data = lo_data, link = log)
lo_data <- cbind(lo_data, Mean = predict(fit, newdata = lo_data, type = "response"), SE = predict(fit, newdata = lo_data, type = "response", se.fit = T)$se.fit)
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
ARG.sum.lo <- ggplot(lo_data, aes(x = location, y = Mean)) +
geom_line() + geom_jitter(data = lo_data, aes(x = location, y = SUM, color = location),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
scale_fill_manual(values = mycolors) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") +
scale_y_continuous(trans = "log10")
ARG.sum.lo
## Check if significant
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_clean)))),
location = sample_data(resfinder_PHY_clean)$location)
# When outliers removed use:
#lo_data[which(lo_data$SUM %in% outliers),]
#lo_data <- lo_data[-which(lo_data$SUM %in% outliers),]
fit <- glm.nb(SUM ~ location, data = lo_data, link = log)
# Tukey's post hoc test
glht.mod <- glht(fit, mcp(location = "Tukey"))
print(summary(glht(glht.mod)))
# Significant comparisons:
#Clinique SOUKA - Central clinic of Calavi == 0                                        -3.955    <0.01 **
#Helsinki University Hospital - Central clinic of Calavi == 0                          -3.378   0.0399 *
#Hopital de Zone Calavi - Central clinic of Calavi == 0                                -4.927    <0.01 ***
#Savalou area - Central clinic of Calavi == 0                                          -8.032    <0.01 ***
#Source de Vie, Ouagadougou - Central clinic of Calavi == 0                            -3.920    <0.01 **
#Savalou area - Central Finland Health Care District == 0                              -3.939    <0.01 **
#Savalou area - Clinique SOUKA == 0                                                    -4.638    <0.01 ***
#Savalou area - Helsinki University Hospital == 0                                      -3.826    <0.01 **
#Savalou area - Hopital de Zone Calavi == 0                                            -4.394    <0.01 ***
#Yalgado teaching hospital of Ouagadougou - Hopital de Zone Calavi == 0                 3.623   0.0171 *
#Savalou area - Hospital Saint Jean == 0                                               -6.079    <0.01 ***
#Savalou area - Koudougou Hospital == 0                                                -6.427    <0.01 ***
#Savalou area - Menontin hospital == 0                                                 -6.546    <0.01 ***
#Savalou area - Nanoro Hospital == 0                                                   -3.868    <0.01 **
#Source de Vie, Ouagadougou - Savalou area == 0                                         3.308   0.0492 *
#Yalgado teaching hospital of Ouagadougou - Savalou area == 0                           7.406    <0.01 ***
# Average 16S counts bu location
mean16S_counts <- mean(metadata$SSU_counts, invert = TRUE)
co_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_clean)))),
country = sample_data(resfinder_PHY_clean)$country)
plot(co_data$SUM~co_data$country, cex.axis=0.5, srt=45, las=2, xlab=NULL)
# Testing models to support the data
## Linear
model.ln<-lm(SUM~country, data=co_data)
summary(model.ln)
shapiro.test(lo_data$SUM)
plot(model.ln)
# The p value is > 0.05 and differs significantly from normal distribution
## Log
model.logln<-lm(log(SUM)~country, data=co_data)
summary(model.logln)
shapiro.test(log(co_data$SUM))
plot(model.logln)
# Data is not normally distributed.
## Poisson
model.pois = glm(SUM~country , data = co_data, family = poisson)
summary(model.pois)
plot(model.pois)
## Quasipoisson
model.qpois<-glm(SUM~country, data=co_data, family="quasipoisson")
summary(model.qpois)
plot(model.qpois)
## Negative binomial
model.nb <- glm.nb(SUM~country, data=co_data)
summary(model.nb)
plot(model.nb)
1/model.nb$theta
-2*(logLik(model.pois)-logLik(model.nb))
# Summarize models
data.frame(linear=coef(model.ln),
loglinear=exp(coef(model.logln)),
poisson=exp(coef(model.pois)),
qpoisson=exp(coef(model.qpois)),
negbin=exp(coef(model.nb)))
# Critical value
qchisq(0.95, df.residual(model.nb))
deviance(model.ln)
deviance(model.logln)
deviance(model.pois)
deviance(model.qpois)
deviance(model.nb)
# None of the models fits the data. However, negative binominal gets the closest.
# Plot using neg. binom. model
co_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_clean)))),
country = sample_data(resfinder_PHY_clean)$country)
fit <- glm.nb(SUM ~ country, data = co_data, link = log)
co_data <- cbind(co_data, Mean = predict(fit, newdata = co_data, type = "response"), SE = predict(fit, newdata = co_data, type = "response", se.fit = T)$se.fit)
ARG.sum.co <- ggplot(co_data, aes(x = country, y = Mean)) +
scale_color_manual(values=c("#FF333F", "#35E0F5", "#531592")) +
geom_line() + geom_jitter(data = co_data, aes(x = country, y = SUM, color = country),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") + scale_y_log10()
ARG.sum.co
## Check if significant
co_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_clean)))),
country = sample_data(resfinder_PHY_clean)$country)
# Exclude outliers
#co_data[which(co_data$SUM %in% outliers),]
#co_data <- co_data[-which(co_data$SUM %in% outliers),]
fit <- glm.nb(SUM ~ country, data = co_data, link = log)
# Tukey's post hoc test
glht.mod <- glht(fit, mcp(country = "Tukey"))
summary(glht(glht.mod))
# No significant results. Maybe there would be if only actual hospital ww samples were included? Then Savalou environment would be excluded with its low sum abundance.
resfinder_PHY_Class <- tax_glom(resfinder_PHY_clean, taxrank = "Class")
# All classes
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)),
resfinder_PHY_Class)
# Normalize by number of samples in each country
otu_table(resfinder_PHY_Class_abund) <-   (otu_table(resfinder_PHY_Class_abund)[,]/as.matrix(table(sample_data(resfinder_PHY_Class_abund)$country))[, 1])
p17<-plot_bar(resfinder_PHY_Class_abund, x="name", fill="Class")
resfinder.p17 <- p17 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum relative abundance of ARGs by classes/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p17 + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
resfinder.p17 + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
