## List of genes of interest
gen_to_keep <- c("aac(6')-30-aac(6')-Ib'_1_AJ584652", "aac(6')-Ib-Suzhou_1_EU085533", "aadA13_2_NC010643", "aadA2_1_NC_010870", "aph(6)-Id_1_M28829", "aph(3'')-Ib_3_AF321550", "ant(2'')-Ia_2_JF826500", "aac(3)-IIa_1_X51534", "aac(6')-Ib_1_M21682", "aac(6')-aph(2'')_1_M13771", "ant(3'')-Ia_1_X02340", "aadA1b_1_M95287", "aadA13_1_AY713504", "aph(2'')-Id_1_AF016483", "aac(6')-Ib-cr_1_DQ303918", "str_1_X92946", "blaOXA-347_1_ACWG01000053", "blaOXA-415_1_KJ865754", "blaOXA-420_1_AB983359", "blaOXA-534_1_KX714285", "blaOXA-540_1_KJ138219", "blaACT-4_2_AJ311172", "blaCMY-2_1_X91840", "blaCMY-41_1_AB429270", "blaCMY-94_1_JX514368", "blaCTX-M-1_1_DQ915955", "blaCTX-M-14_1_AF252622", "blaCTX-M-28_6_AJ549244", "blaCTX-M-46_1_AY847147", "blaCTX-M-142_1_KF240809", "blaCTX-M-8_1_AF189721", "blaDHA-1_1_Y16410", "blaFOX-2_1_Y10282", "blaKPC-2_1_AY034847", "blaKPC-3_1_HM769262", "blaMOX-2_1_AJ276453", "blaOXA-1_1_HQ170510", "blaOXA-5_1_AF347074", "blaOXA-10_1_J03427", "blaOXA-101_1_AM412777", "blaOXA-119_1_DQ767903", "blaOXA-129_1_FJWZ01000025", "blaOXA-145_1_FJ790516", "blaOXA-181_1_CM004561", "blaOXA-240_1_JX089628", "blaOXA-256_1_HE616889", "blaOXA-320_1_KF151169", "blaTEM-1B_1_AY458016", "blaVEB-1_1_HM370393", "blaNPS_1_AY027589", "blaAER-1_1_U14748", "cfxA_1_U38243", "blaIMP-1_1_EF027105", "blaIMP-15_1_AY553333", "blaVIM-5_1_DQ023222", "blaVIM-38_1_KC469971", "blaNDM-1_1_FN396876", "blaGES-1_1_HQ170511", "blaGES-5_1_DQ236171", "blaOXA-296_1_APOH01000009", "blaOXA-246_1_EU886980", "blaCTX-M-150_1_KF769131", "blaCTX-M-156_1_KM211509", "blaCTX-M-211_1_MH067961", "blaCTX-M-2_1_AB176535", "blaCTX-M-3_1_Y10278", "blaCTX-M-15_1_AY044436", "blaCMY-4_1_LNHZ01000079", "blaTEM-215_1_KP050492", "blaSHV-11_1_X98101", "blaCARB-4_1_FJ785525", "blaCMY-150_2_NG_060513", "blaPAU-1_1_MH053445", "mcr-1.1_1_KP347127", "mcr-3.1_1_KY924928", "mcr-3.12_1_MG564491", "mcr-3.15_1_MH332765", "mcr-7.1_1_MG267386", "fosA_7_AEXB01000013", "VanA_bc_1_Y15704", "ere(A)_6_DQ157752", "ere(D)_1_KP265721", "erm(A)_2_AF002716", "erm(B)_1_JN899585", "erm(B)_18_X66468", "erm(F)_3_M17808", "erm(G)_1_M15332", "mef(A)_4_HG423652", "msr(E)_1_FR751518", "ere(A)_1_AY183453", "lnu(F)_3_AJ561197", "mph(A)_1_D16251", "mph(E)_1_DQ839391", "mef(C)_1_AB571865", "mdf(A)_1_Y08743", "lsa(E)_1_JX560992", "nimA_1_X71444", "nimE_1_AM042593", "catB3_2_U13880", "catB8_1_AF227506", "cat_2_M35190", "cmlA1_1_M64556", "floR_1_AF071555", "qnrA1_1_AY070235", "qnrB42_1_JN680743", "qnrS2_1_DQ485530", "ARR-3_4_FM207631", "sul1_2_U12338", "sul2_1_AF542061", "sul3_2_AJ459418", "tet(39)_1_KT346360", "tet(36)_1_AJ514254", "tet(A)_4_AJ517790", "tet(G)_2_AF133140", "tet(C)_2_AY046276", "tet(M)_8_X04388", "tet(Q)_1_L33696", "dfrA14_1_KF921535", "dfrA1_3_GU726913")
subset = subset_taxa(resfinder_PHY_Gene, Gene %in% gen_to_keep)
# Retain genes whose sum relative abundance above 0.0025
#minTotRelAbun = 0.0025
#x = taxa_sums(resfinder_PHY_betalactam)
#keepTaxa = taxa_names(resfinder_PHY_betalactam)[which((x / sum(x)) > minTotRelAbun)]
#resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_betalactam)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(subset), "matrix")
# transpose if necessary
if(taxa_are_rows(subset)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(subset), "matrix")
# Transpose if necessary
if(taxa_are_rows(subset)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot0 <- read.delim("annot.txt", header = T)
# Remove samples
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
heat.df$country <- annot$country
View(annot)
annot0 <- read.delim("annot.txt", header = T)
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
heat.df$country <- annot$country
heat.df$country <- annot$country
View(annot)
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
View(annot)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
heat.t <- t(heat.df)
# Actual heatmap
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#9E42F9", Benin="#F94C31", Finland="#86F1FA"),
sample_type = c(waste_water = "white", human_feces = "#38B13E", well_water = "grey", river_water= "#F99D34", clean_water= "#D5EDF3", tap_water= "#9797D7", sludge = "#27D5FC", sandy_sediment_sludge = "#AE192E", soil = "lightblue", sediment_sludge = "#74BC97"))
## Plot with square root transformation
custom_heat_sqrt <- pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
## Plot with quantum breaks
custom_heat_breaks <- pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
custom_heat
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
# Remove samples
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
# Transpose
heat.t <- t(heat.df)
# Actual heatmap
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#9E42F9", Benin="#F94C31", Finland="#86F1FA"),
sample_type = c(waste_water = "white", human_feces = "#38B13E", well_water = "grey", river_water= "#F99D34", clean_water= "#D5EDF3", tap_water= "#9797D7", sludge = "#27D5FC", sandy_sediment_sludge = "#AE192E", soil = "lightblue", sediment_sludge = "#74BC97"))
## Plot with square root transformation
custom_heat_sqrt <- pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
## Plot with quantum breaks
custom_heat_breaks <- pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
custom_heat
custom_heat_sqrt
custom_heat
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, taxrank = "Gene")
gen_to_keep <- c("aac(6')-30-aac(6')-Ib'_1_AJ584652", "aac(6')-Ib-Suzhou_1_EU085533", "aadA13_2_NC010643", "aadA2_1_NC_010870", "aph(6)-Id_1_M28829", "aph(3'')-Ib_3_AF321550", "ant(2'')-Ia_2_JF826500", "aac(3)-IIa_1_X51534", "aac(6')-Ib_1_M21682", "aac(6')-aph(2'')_1_M13771", "ant(3'')-Ia_1_X02340", "aadA1b_1_M95287", "aadA13_1_AY713504", "aph(2'')-Id_1_AF016483", "aac(6')-Ib-cr_1_DQ303918", "str_1_X92946", "blaOXA-347_1_ACWG01000053", "blaOXA-415_1_KJ865754", "blaOXA-420_1_AB983359", "blaOXA-534_1_KX714285", "blaOXA-540_1_KJ138219", "blaACT-4_2_AJ311172", "blaCMY-2_1_X91840", "blaCMY-41_1_AB429270", "blaCMY-94_1_JX514368", "blaCTX-M-1_1_DQ915955", "blaCTX-M-14_1_AF252622", "blaCTX-M-28_6_AJ549244", "blaCTX-M-46_1_AY847147", "blaCTX-M-142_1_KF240809", "blaCTX-M-8_1_AF189721", "blaDHA-1_1_Y16410", "blaFOX-2_1_Y10282", "blaKPC-2_1_AY034847", "blaKPC-3_1_HM769262", "blaMOX-2_1_AJ276453", "blaOXA-1_1_HQ170510", "blaOXA-5_1_AF347074", "blaOXA-10_1_J03427", "blaOXA-101_1_AM412777", "blaOXA-119_1_DQ767903", "blaOXA-129_1_FJWZ01000025", "blaOXA-145_1_FJ790516", "blaOXA-181_1_CM004561", "blaOXA-240_1_JX089628", "blaOXA-256_1_HE616889", "blaOXA-320_1_KF151169", "blaTEM-1B_1_AY458016", "blaVEB-1_1_HM370393", "blaNPS_1_AY027589", "blaAER-1_1_U14748", "cfxA_1_U38243", "blaIMP-1_1_EF027105", "blaIMP-15_1_AY553333", "blaVIM-5_1_DQ023222", "blaVIM-38_1_KC469971", "blaNDM-1_1_FN396876", "blaGES-1_1_HQ170511", "blaGES-5_1_DQ236171", "blaOXA-296_1_APOH01000009", "blaOXA-246_1_EU886980", "blaCTX-M-150_1_KF769131", "blaCTX-M-156_1_KM211509", "blaCTX-M-211_1_MH067961", "blaCTX-M-2_1_AB176535", "blaCTX-M-3_1_Y10278", "blaCTX-M-15_1_AY044436", "blaCMY-4_1_LNHZ01000079", "blaTEM-215_1_KP050492", "blaSHV-11_1_X98101", "blaCARB-4_1_FJ785525", "blaCMY-150_2_NG_060513", "blaPAU-1_1_MH053445", "mcr-1.1_1_KP347127", "mcr-3.1_1_KY924928", "mcr-3.12_1_MG564491", "mcr-3.15_1_MH332765", "mcr-7.1_1_MG267386", "fosA_7_AEXB01000013", "VanA_bc_1_Y15704", "ere(A)_6_DQ157752", "ere(D)_1_KP265721", "erm(A)_2_AF002716", "erm(B)_1_JN899585", "erm(B)_18_X66468", "erm(F)_3_M17808", "erm(G)_1_M15332", "mef(A)_4_HG423652", "msr(E)_1_FR751518", "ere(A)_1_AY183453", "lnu(F)_3_AJ561197", "mph(A)_1_D16251", "mph(E)_1_DQ839391", "mef(C)_1_AB571865", "mdf(A)_1_Y08743", "lsa(E)_1_JX560992", "nimA_1_X71444", "nimE_1_AM042593", "catB3_2_U13880", "catB8_1_AF227506", "cat_2_M35190", "cmlA1_1_M64556", "floR_1_AF071555", "qnrA1_1_AY070235", "qnrB42_1_JN680743", "qnrS2_1_DQ485530", "ARR-3_4_FM207631", "sul1_2_U12338", "sul2_1_AF542061", "sul3_2_AJ459418", "tet(39)_1_KT346360", "tet(36)_1_AJ514254", "tet(A)_4_AJ517790", "tet(G)_2_AF133140", "tet(C)_2_AY046276", "tet(M)_8_X04388", "tet(Q)_1_L33696", "dfrA14_1_KF921535", "dfrA1_3_GU726913")
subset = subset_taxa(resfinder_PHY_Gene, Gene %in% gen_to_keep)
heat_OTU = as(otu_table(subset), "matrix")
# transpose if necessary
if(taxa_are_rows(subset)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(subset), "matrix")
# Transpose if necessary
if(taxa_are_rows(subset)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
heat.df$country <- annot0$country
resfinder_PHY_Class <- tax_glom(resfinder_PHY_ast, taxrank = "Class")
resfinder_PHY_betalactam = subset_taxa(resfinder_PHY_Class, Class == "Betalactam")
# Filter
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_betalactam)
keepTaxa = taxa_names(resfinder_PHY_betalactam)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_betalactam_heat = prune_taxa(keepTaxa, resfinder_PHY_betalactam)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_betalactam_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_betalactam_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(resfinder_PHY_betalactam_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_betalactam_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
resfinder_PHY_betalactam = subset_taxa(resfinder_PHY_Class, Class == "Betalactam")
# Filter
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_betalactam)
keepTaxa = taxa_names(resfinder_PHY_betalactam)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_betalactam_heat = prune_taxa(keepTaxa, resfinder_PHY_betalactam)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_betalactam_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_betalactam_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(resfinder_PHY_betalactam_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_betalactam_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
# Remove samples
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
# Transpose
heat.t <- t(heat.df)
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
rownames(annot_col) = colnames(heat_num)
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
# Remove samples
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
colnames(heat.df)=colnames(heat_tax)
View(heat.t)
heat_tax = as(tax_table(resfinder_PHY_betalactam_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_betalactam_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
# Remove samples
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
# Transpose
heat.t <- t(heat.df)
View(heat_num)
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
View(annot_col)
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
rownames(annot_col) = colnames(heat_num)
colnames(heat.df)
heat_tax = as(tax_table(resfinder_PHY_betalactam_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_betalactam_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
# Remove samples
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
# Transpose
heat.t <- t(heat.df)
View(heat.df)
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
View(annot_col)
View(heat.df)
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot0 <- read.delim("annot.txt", header = T, row.names = 1)
# Remove samples
row.names.remove <- c("BH02_S77", "BH27_S92", "BH30_S94", "BFH24_S142", "BH63_S118", "FH10_S171")
annot <- annot0[!(row.names(annot0) %in% row.names.remove), ]
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
heat.t <- t(heat.df)
# Exclude annotation
heat_num = as.matrix(heat.t[1:85,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#9E42F9", Benin="#F94C31", Finland="#86F1FA"),
sample_type = c(waste_water = "white", human_feces = "#38B13E", well_water = "grey", river_water= "#F99D34", clean_water= "#D5EDF3", tap_water= "#9797D7", sludge = "#27D5FC", sandy_sediment_sludge = "#AE192E", soil = "lightblue", sediment_sludge = "#74BC97"))
## Plot with square root transformation
betalactam_heat_sqrt <- pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
## Plot with quantum breaks
betalactam_heat_breaks <- pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
betalactam_heat_sqrt
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
crassphage_table_norm <- t(t(crassphage_table)/metadata$total_seqs)
write.table(crassphage_table_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/crassphage_table_norm.txt", row.names=T, sep = "\t", col.names = T)
crassphage_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/crassphage_table_norm.txt", row.names=NULL)
crassphage_norm$row.names<-NULL
crassphage_norm_log <- log10(crassphage_norm)
# Create phyloseq
crass_PHY<-phyloseq(otu_table(crassphage_norm_log, taxa_are_rows = TRUE), sample_data(metadata))
nb.cols <- 15
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
crassphage_plot <-plot_bar(crass_PHY, fill="sample_type", title = "title") +
facet_grid(~ location, scales = "free", space = "free", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "crassphage"))
crassphage_plot
crassphage_plot <-plot_bar(crass_PHY, fill="sample_type", title = "title") +
facet_grid(~ location, scales = "free", space = "free", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
crassphage_plot
crassphage_plot
crassphage_plot <-plot_bar(crass_PHY, fill="sample_type", title = "title") +
facet_grid(~ location, scales = "free", space = "free", labeller = labeller(country = country.labs)) +
theme_classic() + scale_fill_brewer(10, "Dark2") +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
crassphage_plot
crassphage_plot
crassphage_plot <-plot_bar(crass_PHY, fill="sample_type", title = "title") +
facet_grid(~ location, scales = "free", space = "free", labeller = labeller(country = country.labs)) +
theme_classic() + scale_fill_brewer(palette = "Dark2") +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
crassphage_plot
crassphage_plot
nb.cols <- 10
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
crassphage_plot <-plot_bar(crass_PHY, fill="sample_type", title = "title") +
facet_grid(~ location, scales = "free", space = "free", labeller = labeller(country = country.labs)) +
theme_classic() + scale_fill_manual(values = mycolors) +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
crassphage_plot
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
crassphage_plot <-plot_bar(crass_PHY, fill="sample_type", title = "title") +
facet_grid(~ location, scales = "free", space = "free") +
theme_classic() + scale_fill_manual(values = mycolors) +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
crassphage_plot
crassphage_plot
resfinder_PHY_class <- tax_glom(resfinder_PHY_ast, taxrank = "Class")
resfinder_PHY_class <- tax_glom(resfinder_PHY, taxrank = "Class")
resfinder_PHY_class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_class), TRUE)), resfinder_PHY_class)
nb.cols <- 17
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
resfinder_topclass <- plot_bar(resfinder_PHY_class_abun, fill = "Class", title = "Top ARG classes, ResFinder") +
facet_grid(~country, scales = "free_x", space = "free_x") +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("ARGs/16s rRNA") + xlab("") +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
#  geom_text(aes(label=Gene), vjust=1.6, color="black", size=2.45, position = position_stack(vjust = .75)) +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "Class"))
resfinder_topclass
resfinder_topclass
resfinder_PHY_class <- tax_glom(resfinder_PHY_ast, taxrank = "Class")
resfinder_PHY_class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_class), TRUE)), resfinder_PHY_class)
nb.cols <- 17
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
resfinder_topclass <- plot_bar(resfinder_PHY_class_abun, fill = "Class", title = "title") +
facet_grid(~location, scales = "free_x", space = "free_x") +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("ARGs/16s rRNA") + xlab("") +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
#  geom_text(aes(label=Gene), vjust=1.6, color="black", size=2.45, position = position_stack(vjust = .75)) +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "Class"))
resfinder_topclass
resfinder_topclass
nb.cols <- 17
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
resfinder_topclass <- plot_bar(resfinder_PHY_class_abun, fill = "Class", title = "title") +
facet_grid(~location, scales = "free_x", space = "free_x") +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("ARGs/16s rRNA") + xlab("") +
strip.text.x = element_text(size = 9, angle = 90, hjust = 0) +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
#  geom_text(aes(label=Gene), vjust=1.6, color="black", size=2.45, position = position_stack(vjust = .75)) +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "Class"))
resfinder_topclass <- plot_bar(resfinder_PHY_class_abun, fill = "Class", title = "title") +
facet_grid(~location, scales = "free_x", space = "free_x") +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 10),
axis.title.x = element_blank()) +
strip.text.x = element_text(size = 9, angle = 90, hjust = 0) +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
#  geom_text(aes(label=Gene), vjust=1.6, color="black", size=2.45, position = position_stack(vjust = .75)) +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "Class"))
resfinder_topclass <- plot_bar(resfinder_PHY_class_abun, fill = "Class", title = "title") +
facet_grid(~location, scales = "free_x", space = "free_x") +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 10),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
#  geom_text(aes(label=Gene), vjust=1.6, color="black", size=2.45, position = position_stack(vjust = .75)) +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "Class"))
resfinder_topclass
resfinder_topclass <- plot_bar(resfinder_PHY_class_abun, fill = "sample_type", title = "title") +
facet_grid(~location, scales = "free_x", space = "free_x") +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 10),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
#  geom_text(aes(label=Gene), vjust=1.6, color="black", size=2.45, position = position_stack(vjust = .75)) +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "Class"))
resfinder_topclass
resfinder_topclass
nb.cols <- 10
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
resfinder_topclass <- plot_bar(resfinder_PHY_class_abun, fill = "sample_type", title = "title") +
facet_grid(~location, scales = "free_x", space = "free_x") +
theme_classic() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 10),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
scale_fill_manual(values=mycolors) + geom_bar(stat="identity") +
#  geom_text(aes(label=Gene), vjust=1.6, color="black", size=2.45, position = position_stack(vjust = .75)) +
guides(fill = guide_legend(label.theme = element_text(size = 10), keywidth = 1.5, keyheight = 1.5, title = "Class"))
resfinder_topclass
resfinder_topclass
