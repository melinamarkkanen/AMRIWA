colnames(tax_table_resfinder) <- c("Gene", "Class")
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# Have a quick look
plot_bar(otu_table(resfinder_PHY))
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
resfinder_PHY_ast = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
any(taxa_sums(resfinder_PHY_ast) == 0)
resfinder_PHY_ast <- prune_taxa(taxa_sums(resfinder_PHY_ast) > 0, resfinder_PHY_ast)
any(taxa_sums(resfinder_PHY_ast) == 0)
resfinder_PHY_ord <- ordinate(resfinder_PHY_ast, method = "PCoA", distance = "horn")
p3 <- plot_ordination(resfinder_PHY_ast, resfinder_PHY_ord, color = "country", label = "name")
resfinder.p3 <- p3 + scale_color_manual(values=c("#FF333F", "#35E0F5", "#531592")) +
geom_point(colour = "black", pch = 21, size = 2, alpha = 0.5) + stat_ellipse(level = 0.95, linetype = 1) +
theme_minimal() + labs(title = "ResFinder")
resfinder.p3
resfinder_temp <- subset_samples(resfinder_PHY_ast, (country == "Finland" | country == "Benin"))
resfinder_dist <- vegdist(t(otu_table(resfinder_temp)), dist = "horn")
adonis(resfinder_dist ~ country, data = data.frame(sample_data(resfinder_temp), permutations = 9999))
resfinder_temp <- subset_samples(resfinder_PHY_ast, (country == "Burkina Faso" | country == "Benin"))
resfinder_dist <- vegdist(t(otu_table(resfinder_temp)), dist = "horn")
adonis(resfinder_dist ~ country, data = data.frame(sample_data(resfinder_temp), permutations = 9999))
resfinder_temp <- subset_samples(resfinder_PHY_ast, (country == "Finland" | country == "Burkina Faso"))
resfinder_dist <- vegdist(t(otu_table(resfinder_temp)), dist = "horn")
adonis(resfinder_dist ~ country, data = data.frame(sample_data(resfinder_temp), permutations = 9999))
Benin <- subset_samples(resfinder_PHY_ast, (country == "Benin"))
Benin_dist <- vegdist(t(otu_table(Benin)), dist = "horn")
adonis(Benin_dist ~ location, data = data.frame(sample_data(Benin)), permutations = 99999)
BF <- subset_samples(resfinder_PHY_ast, (country == "Burkina Faso"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(resfinder_PHY_ast, (country == "Finland"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
# In Benin and BF the grouping by location has R2 values like 26.5 % (p=4e-05) and 20.4 % (p=0.00175). In Finland no significant correlation can be proven.
# Shannon
## Take a look at the indexes
resfinder_tab <-microbiome::alpha(resfinder_PHY_ast, index = "diversity_shannon")
kable(head(resfinder_tab))
## Create data table
resfinder.meta <- meta(resfinder_PHY_ast)
kable(head(resfinder.meta))
## Add indexes to data table
resfinder.meta$diversity_shannon <- resfinder_tab$diversity_shannon
# Check whether the distribution of the diversity is normal
hist(resfinder.meta$diversity_shannon)
shapiro.test(resfinder.meta$diversity_shannon) # Does not fit the assumption of normal distribution > wilcox test.
qqnorm(resfinder.meta$diversity_shannon)
# Create a list of pairwise comparisons
div.country <- levels(resfinder.meta$country)
country.pairs <- combn(seq_along(div.country), 2, simplify = FALSE, FUN = function(i)div.country[i])
print(country.pairs)
# Gini Simpson
## Take a look at the indexes
resfinder_tab <-microbiome::alpha(resfinder_PHY_ast, index = "diversity_gini_simpson")
kable(head(resfinder_tab))
## Add indexes to data table
resfinder.meta$diversity_gini_simpson <- resfinder_tab$diversity_gini_simpson
# Check whether the distribution of the diversity is normal
hist(resfinder.meta$diversity_gini_simpson)
shapiro.test(resfinder.meta$diversity_gini_simpson) # Does not fit the assumption of normal distribution > wilcox test.
qqnorm(resfinder.meta$diversity_gini_simpson)
# Inverse Simpson
## Take a look at the indexes
resfinder_tab <-microbiome::alpha(resfinder_PHY_ast, index = "diversity_inverse_simpson")
kable(head(resfinder_tab))
## Add indexes to data table
resfinder.meta$diversity_inverse_simpson <- resfinder_tab$diversity_inverse_simpson
# Check whether the distribution of the diversity is normal
hist(resfinder.meta$diversity_inverse_simpson)
shapiro.test(resfinder.meta$diversity_inverse_simpson)
qqnorm(resfinder.meta$diversity_inverse_simpson)
p10 <- ggviolin(resfinder.meta, x = "country", y = "diversity_shannon",
add = "boxplot", fill = "country", palette = c("#FF333F", "#35E0F5", "#531592"))
resfinder.p10 <- p10 + stat_compare_means(comparisons = country.pairs, method = "wilcox.test")
resfinder.p10
p11 <- ggviolin(resfinder.meta, x = "country", y = "diversity_gini_simpson",
add = "boxplot", fill = "country", palette = c("#FF333F", "#35E0F5", "#531592"))
resfinder.p11 <- p11 + stat_compare_means(comparisons = country.pairs, method = "wilcox.test")
resfinder.p11
p12 <- ggviolin(resfinder.meta, x = "country", y = "diversity_inverse_simpson",
add = "boxplot", fill = "country", palette = c("#FF333F", "#35E0F5", "#531592"))
resfinder.p12 <- p12 + stat_compare_means(comparisons = country.pairs, method = "t.test")
resfinder.p12
# The resistome seems less complex in Finnish samples than in Burkinabe and Beninise.
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
loc <- plot_richness(resfinder_PHY_ast, measures = c("Shannon", "Simpson"),
color="location", shape = "country")
resfinder.in <- loc + scale_fill_manual(values=mycolors) +
geom_boxplot() +
geom_point(size=3) + theme_minimal() +
theme(axis.text.x = element_text(angle = 90, size =5))
resfinder.in
# Average 16S counts by location
mean16S_counts <- mean(metadata$SSU_counts, invert = TRUE)
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
location = sample_data(resfinder_PHY_ast)$location)
plot(lo_data$SUM~lo_data$location, cex.axis=0.5, srt=45, las=2, xlab=NULL)
# Testing models to support the data
## Linear
model.ln<-lm(SUM~location, data=lo_data)
summary(model.ln)
shapiro.test(lo_data$SUM)
plot(model.ln)
# The p value is > 0.05 and differs significantly from normal distribution
## Log
model.logln<-lm(log(SUM)~location, data=lo_data)
summary(model.logln)
shapiro.test(log(lo_data$SUM))
plot(model.logln)
# The p value is > 0.05 and differs significantly from normal distribution
## Poisson
model.pois = glm(SUM ~ location , data = lo_data, family = poisson)
summary(model.pois)
plot(model.pois)
## Quasipoisson
model.qpois<-glm(SUM~location, data=lo_data, family="quasipoisson")
summary(model.qpois)
plot(model.qpois)
## Negative binomial
model.nb <- glm.nb(SUM~location, data=lo_data)
summary(model.nb)
plot(model.nb)
# Summarize and compare models
data.frame(linear=coef(model.ln),
loglinear=exp(coef(model.logln)),
poisson=exp(coef(model.pois)),
qpoisson=exp(coef(model.qpois)),
negbin=exp(coef(model.nb)))
# Critical value
qchisq(0.95, df.residual(model.pois))
deviance(model.ln)
deviance(model.logln)
deviance(model.pois)
deviance(model.qpois)
deviance(model.nb)
# None of the models fits the data. However, negative binominal model gets the closest.
# When Savalou are samples are excluded negative binominal get very close.
qchisq(0.95, df.residual(model.pois))
deviance(model.ln)
deviance(model.logln)
deviance(model.pois)
deviance(model.qpois)
deviance(model.nb)
# Plot using neg. binom. model
fit <- glm.nb(SUM ~ location, data = lo_data, link = log)
lo_data <- cbind(lo_data, Mean = predict(fit, newdata = lo_data, type = "response"), SE = predict(fit, newdata = lo_data, type = "response", se.fit = T)$se.fit)
nb.cols <- 14
mycolors <- colorRampPalette(brewer.pal(11, "Spectral"))(nb.cols)
ARG.sum.lo <- ggplot(lo_data, aes(x = location, y = Mean)) +
geom_line() + geom_jitter(data = lo_data, aes(x = location, y = SUM, color = location),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
scale_fill_manual(values = mycolors) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") +
scale_y_continuous(trans = "log10")
ARG.sum.lo
## Check if significant
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
location = sample_data(resfinder_PHY_ast)$location)
# When outliers removed use:
#lo_data[which(lo_data$SUM %in% outliers),]
#lo_data <- lo_data[-which(lo_data$SUM %in% outliers),]
fit <- glm.nb(SUM ~ location, data = lo_data, link = log)
# Tukey's post hoc test
glht.mod <- glht(fit, mcp(location = "Tukey"))
print(summary(glht(glht.mod)))
# Significant comparisons:
#Clinique SOUKA - Central clinic of Calavi == 0                                        -3.955    <0.01 **
#Helsinki University Hospital - Central clinic of Calavi == 0                          -3.378   0.0399 *
#Hopital de Zone Calavi - Central clinic of Calavi == 0                                -4.927    <0.01 ***
#Savalou area - Central clinic of Calavi == 0                                          -8.032    <0.01 ***
#Source de Vie, Ouagadougou - Central clinic of Calavi == 0                            -3.920    <0.01 **
#Savalou area - Central Finland Health Care District == 0                              -3.939    <0.01 **
#Savalou area - Clinique SOUKA == 0                                                    -4.638    <0.01 ***
#Savalou area - Helsinki University Hospital == 0                                      -3.826    <0.01 **
#Savalou area - Hopital de Zone Calavi == 0                                            -4.394    <0.01 ***
#Yalgado teaching hospital of Ouagadougou - Hopital de Zone Calavi == 0                 3.623   0.0171 *
#Savalou area - Hospital Saint Jean == 0                                               -6.079    <0.01 ***
#Savalou area - Koudougou Hospital == 0                                                -6.427    <0.01 ***
#Savalou area - Menontin hospital == 0                                                 -6.546    <0.01 ***
#Savalou area - Nanoro Hospital == 0                                                   -3.868    <0.01 **
#Source de Vie, Ouagadougou - Savalou area == 0                                         3.308   0.0492 *
#Yalgado teaching hospital of Ouagadougou - Savalou area == 0                           7.406    <0.01 ***
# Average 16S counts bu location
mean16S_counts <- mean(metadata$SSU_counts, invert = TRUE)
co_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
country = sample_data(resfinder_PHY_ast)$country)
plot(co_data$SUM~co_data$country, cex.axis=0.5, srt=45, las=2, xlab=NULL)
# Testing models to support the data
## Linear
model.ln<-lm(SUM~country, data=co_data)
summary(model.ln)
shapiro.test(lo_data$SUM)
plot(model.ln)
# The p value is > 0.05 and differs significantly from normal distribution
## Log
model.logln<-lm(log(SUM)~country, data=co_data)
summary(model.logln)
shapiro.test(log(co_data$SUM))
plot(model.logln)
# Data is not normally distributed.
## Poisson
model.pois = glm(SUM~country , data = co_data, family = poisson)
summary(model.pois)
plot(model.pois)
## Quasipoisson
model.qpois<-glm(SUM~country, data=co_data, family="quasipoisson")
summary(model.qpois)
plot(model.qpois)
## Negative binomial
model.nb <- glm.nb(SUM~country, data=co_data)
summary(model.nb)
plot(model.nb)
1/model.nb$theta
-2*(logLik(model.pois)-logLik(model.nb))
# Summarize models
data.frame(linear=coef(model.ln),
loglinear=exp(coef(model.logln)),
poisson=exp(coef(model.pois)),
qpoisson=exp(coef(model.qpois)),
negbin=exp(coef(model.nb)))
# Critical value
qchisq(0.95, df.residual(model.nb))
deviance(model.ln)
deviance(model.logln)
deviance(model.pois)
deviance(model.qpois)
deviance(model.nb)
# None of the models fits the data. However, negative binominal gets the closest.
# When Savalou are is excluded negative model fits the data.
qchisq(0.95, df.residual(model.nb))
deviance(model.ln)
deviance(model.logln)
deviance(model.pois)
deviance(model.qpois)
deviance(model.nb)
# Plot using neg. binom. model
co_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
country = sample_data(resfinder_PHY_ast)$country)
fit <- glm.nb(SUM ~ country, data = co_data, link = log)
co_data <- cbind(co_data, Mean = predict(fit, newdata = co_data, type = "response"), SE = predict(fit, newdata = co_data, type = "response", se.fit = T)$se.fit)
ARG.sum.co <- ggplot(co_data, aes(x = country, y = Mean)) +
scale_color_manual(values=c("#FF333F", "#35E0F5", "#531592")) +
geom_line() + geom_jitter(data = co_data, aes(x = country, y = SUM, color = country),
size = 2.3, alpha = 0.5, width = 0.3) +
geom_errorbar(aes(ymin = Mean - SE, ymax = Mean + SE), width = 0.6, lwd = 0.6) +
geom_point(size = 0.9) +
theme_classic() + theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(y = "Sum abundance/16S",
x = "") + guides(color = FALSE, alpha = FALSE) + labs(title = "ARGs") + scale_y_log10()
ARG.sum.co
ARG.sum.co
## Check if significant
co_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
country = sample_data(resfinder_PHY_ast)$country)
# Exclude outliers
#co_data[which(co_data$SUM %in% outliers),]
#co_data <- co_data[-which(co_data$SUM %in% outliers),]
fit <- glm.nb(SUM ~ country, data = co_data, link = log)
# Tukey's post hoc test
glht.mod <- glht(fit, mcp(country = "Tukey"))
summary(glht(glht.mod))
# No significant results. Maybe there would be if only actual hospital ww samples were included? Then Savalou environment would be excluded with its low sum abundance.
# With gene length normalized data comparison Finland-Benin is significant.
# When excluding Savalou are comparison Finland-Benin is significant (p=0.0222). Finland-BF is almost significant (p=0.09)
resfinder_PHY_Class <- tax_glom(resfinder_PHY_ast, taxrank = "Class")
resfinder_PHY_Class <- tax_glom(resfinder_PHY_ast, taxrank = "Class")
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)),
resfinder_PHY_Class)
# Normalize by number of samples in each country
otu_table(resfinder_PHY_Class_abund) <-   (otu_table(resfinder_PHY_Class_abund)[,]/as.matrix(table(sample_data(resfinder_PHY_Class_abund)$country))[, 1])
p17<-plot_bar(resfinder_PHY_Class_abund, x="name", fill="Class")
resfinder.p17 <- p17 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum relative abundance of ARGs by classes/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p17 + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
resfinder.p17 + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
resfinder_PHY_Gene <- tax_glom(resfinder_PHY_ast, taxrank = "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
# Remove samples with none of these
resfinder_PHY_Gene_abund <- subset_samples(resfinder_PHY_Gene_abund, sample_sums(resfinder_PHY_Gene_abund) !=
0)
# Normalize by number of samples in each country
otu_table(resfinder_PHY_Gene_abund) <-   (otu_table(resfinder_PHY_Gene_abund)[,]/as.matrix(table(sample_data(resfinder_PHY_Gene_abund)$country))[, 1])
p18<-plot_bar(resfinder_PHY_Gene_abund, x="name", fill="Gene")
resfinder.p18 <- p18 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum relative abundances of ARGs/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p18 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
resfinder.p18 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
resfinder_PHY_betalactams = subset_taxa(BFH20_S138.log, Class=="Betalactam")
resfinder_PHY_betalactams = subset_taxa(resfinder_PHY_ast, Class=="Betalactam")
resfinder_PHY_betalactams_Gene <- tax_glom(resfinder_PHY_betalactams, "Gene")
# Top12
resfinder_PHY_betalactams_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_betalactams_Gene), TRUE)[1:12]), resfinder_PHY_betalactams_Gene)
# Remove samples with none of these
resfinder_PHY_betalactams_Gene_abund <- subset_samples(resfinder_PHY_betalactams_Gene_abund, sample_sums(resfinder_PHY_betalactams_Gene_abund) !=
0)
# Normalize by sample number in each country
otu_table(resfinder_PHY_betalactams_Gene_abund) <- (otu_table(resfinder_PHY_betalactams_Gene_abund)[, ]/as.matrix(table(sample_data(resfinder_PHY_betalactams_Gene_abund)$country))[,
1])
p19<-plot_bar(resfinder_PHY_betalactams_Gene_abund, x="name", fill="Gene")
resfinder.p19 <- p19 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum of relative abundances of top 12 betalactams/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p19 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
resfinder.p19 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
minTotRelAbun = 1e-5
x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) < minTotRelAbun)]
prunedSet = prune_taxa(keepTaxa, resfinder_PHY_Gene)
#View(resfinder_PHY_Gene) # 2365
#View(prunedSet) # 1006
# Select 12 of the rare
resfinder_PHY_Gene_rare <- prune_taxa(names(sort(taxa_sums(prunedSet), TRUE)[1:12]),
prunedSet)
# Remove samples with none of these
resfinder_PHY_Gene_rare <- subset_samples(resfinder_PHY_Gene_rare, sample_sums(resfinder_PHY_Gene_rare) !=
0)
# Normalize by number of samples in each country
otu_table(resfinder_PHY_Gene_rare) <-   (otu_table(resfinder_PHY_Gene_rare)[,]/as.matrix(table(sample_data(resfinder_PHY_Gene_rare)$country))[, 1])
p20<-plot_bar(resfinder_PHY_Gene_rare, x="name", fill="Gene")
resfinder.p20 <- p20 +
facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum relative abundances of rare ARGs/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p20 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
resfinder.p20 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
resfinder_PHY_Class <- tax_glom(resfinder_PHY_ast, taxrank = "Class")
# All classes
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)),
resfinder_PHY_Class)
# Normalize by number of samples in each country
otu_table(resfinder_PHY_Class_abund) <-   (otu_table(resfinder_PHY_Class_abund)[,]/as.matrix(table(sample_data(resfinder_PHY_Class_abund)$country))[, 1])
p21<-plot_bar(resfinder_PHY_Class_abund, x="country", fill="Class")
resfinder.p21 <- p21 + facet_grid(~ country, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum relative abundance of ARGs by classes/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p21 + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
resfinder.p21 + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
resfinder_PHY_Class <- tax_glom(resfinder_PHY_ast, taxrank = "Class")
# All classes
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)),
resfinder_PHY_Class)
# Normalize by number of samples in each country
otu_table(resfinder_PHY_Class_abund) <-   (otu_table(resfinder_PHY_Class_abund)[,]/as.matrix(table(sample_data(resfinder_PHY_Class_abund)$location))[, 1])
ps0 <- transform_sample_counts(resfinder_PHY_Class_abund, function(x) x / sum(x))
ps1 <- merge_samples(ps0, "location")
ps2 <- transform_sample_counts(ps1, function(x) x / sum(x))
plot_bar(ps2, fill="Class") + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
plot_bar(ps2, fill="Class") + geom_bar(aes(color=Class, fill=Class), stat="identity", position="stack")
View(ARG_genemat_norm)
View(metadata)
View(ARG_genemat)
# Prepare data
resfinder_PHY_Gene <- tax_glom(resfinder_PHY_ast, taxrank = "Gene")
# Retain genes whose sum relative abundance above 0.0025
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_Gene)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(resfinder_PHY_Gene_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
# Transpose
heat.t <- t(heat.df)
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:105,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#FCAFA6", Benin="#67F3D7", Finland="#CE8BFA"),
sample_type = c(waste_water = "black", human_feces = "#B10D82", well_water = "grey", river_water= "#A7E4F3", clean_water= "#D5EDF3", tap_water= "#A7F2D2", sludge = "white", sandy_sediment_sludge = "white", soil = "white", sediment_sludge = "white"))
## Plot
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
# Samples BH58, BH59 and BH60 have very high abundance of many genes, thus the scale for the colors is limited.
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 4.5, cellheight = 4.5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "ARGs present in abundance of > 2.5e-3/16S rRNA")
# Load data (modified in excel to match metadata order)
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
# Transform
crassphage_table <- t(crassphage_table)
# Normalize to total sequences
crassphage_norm <- crassphage_table/metadata$total_seqs
# Add colnames
colnames(crassphage_norm) <- c("count")
# log transform
crassphage_norm_log <- log10(crassphage_norm)
# Create phyloseq
crass_PHY<-phyloseq(otu_table(crassphage_norm, taxa_are_rows = FALSE), sample_data(metadata))
# Filter samples
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
crass_PHY = subset_samples(crass_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Exclude suspicious samples
crass_PHY_ast = subset_samples(crass_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Plot
p23<-plot_bar(crass_PHY_ast, fill="sample_type")
crass.p23 <- p23 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
crass.p23 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
crass.p23 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
identical(crassphage_table[1, 1]/metadata$total_seqs[1], crassphage_norm[1, 1])
identical(crassphage_table[1, 3]/metadata$total_seqs[1], crassphage_norm[1, 3])
identical(crassphage_table[3, 1]/metadata$total_seqs[1], crassphage_norm[3, 1])
crassphage_table <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/mod_crassphage_table.txt", row.names=NULL)
crassphage_table_trans <- t(crassphage_table)
crassphage_norm <- crassphage_table_trans/metadata$total_seqs
identical(crassphage_table[3, 1]/metadata$total_seqs[1], crassphage_norm[3, 1])
identical(crassphage_table_trans[3, 1]/metadata$total_seqs[1], crassphage_norm[3, 1])
View(crassphage_table)
View(metadata$total_seqs)
View(crassphage_table_trans)
View(metadata)
ARG_genemat_seqnorm <- t(t(ARG_genemat)/metadata$total_seqs)
identical(ARG_genemat[2020, 4]/metadata$total_seqs[4], ARG_genemat_seqnorm[2020, 4])
resfinder_PHY_seqnorm <- phyloseq(otu_table(ARG_genemat_seqnorm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
View(tax_table_resfinder)
tax_table()
tax_table(tax_table_resfinder)
otu_table(resfinder_PHY)
ARG_genemat_seqnorm <- t(t(ARG_genemat)/metadata$total_seqs)
identical(ARG_genemat[2020, 4]/metadata$total_seqs[4], ARG_genemat_seqnorm[2020, 4])
write.table(ARG_genemat_seqnorm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_seqnorm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_seqnorm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_seqnorm.txt", row.names=NULL)
ARG_genemat_seqnorm$row.names<-NULL
resfinder_PHY_seqnorm <- phyloseq(otu_table(ARG_genemat_seqnorm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
resfinder_PHY_seqnorm = ubset_samples(resfinder_PHY_seqnorm, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
resfinder_PHY_seqnorm = subset_samples(resfinder_PHY_seqnorm, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
resfinder_PHY_seqnorm_ast = subset_samples(resfinder_PHY_seqnorm, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
crass.p23 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
# Plot
p24<-plot_bar(resfinder_PHY_seqnorm_ast, fill="sample_type")
resfinder.p24 <- p24 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p24 + geom_bar(aes(fill=sample_type), stat="identity", position="stack")
