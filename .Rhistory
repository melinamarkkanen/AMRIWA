breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 0.1) {
breaks <- quantile(xs, probs = seq(0, 0.1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 0.1)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 5))
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 5))
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 0.001, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1))
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
# Now to the actual heatmap
## set breaks
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
resfinder_PHY_Gene <- tax_glom(resfinder_PHY_clean, taxrank = "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
# Remove samples with none of these
resfinder_PHY_Gene_abund <- subset_samples(resfinder_PHY_Gene_abund, sample_sums(resfinder_PHY_Gene_abund) !=
0)
# Normalize by number of samples in each country
otu_table(resfinder_PHY_Gene_abund) <-   (otu_table(resfinder_PHY_Gene_abund)[,]/as.matrix(table(sample_data(resfinder_PHY_Gene_abund)$country))[, 1])
p18<-plot_bar(resfinder_PHY_Gene_abund, x="name", fill="Gene")
resfinder.p18 <- p18 + facet_grid(~ location, scales = "free", space = "free", labeller = label_wrap_gen()) +
ggtitle("Sum relative abundances of ARGs/16S") +
theme_linedraw() +
theme(axis.text.x = element_text(angle=90, hjust=1, size = 8),
axis.title.x = element_blank(),
strip.text.x = element_text(size = 9, angle = 90, hjust = 0)) +
guides(fill = guide_legend(label.theme = element_text(size = 7), keywidth = 1.2, keyheight = 1.2))
# Remove OTU separators
resfinder.p18 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
resfinder.p18 + geom_bar(aes(color=Gene, fill=Gene), stat="identity", position="stack")
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_Gene)
resfinder_PHY_Gene_heat
View(resfinder_PHY_Gene_heat)
View(tax_table(resfinder_PHY_Gene_heat))
tax_table(resfinder_PHY_Gene_heat)
otu_table(resfinder_PHY_Gene_heat)
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat = as.data.frame(heat_OTU)
heat_OTU
View(heat_OTU)
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat = as.data.frame(heat_OTU)
View(heat)
taxa_sums(heat)
taxa_sums(heat)
taxa_sums(heat_OTU)
taxa_sums(resfinder_PHY_Gene_heat)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
# Now to the actual heatmap
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
## set breaks
quantile_breaks <- function(xs, n = 500) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
quantile_breaks <- function(xs, n = 500) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= rainbow(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= rainbow(length(mat_breaks) - 1), breaks = mat_breaks)
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= viridis(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= viridis(length(mat_breaks) - 1), breaks = mat_breaks)
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= magma(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= magma(length(mat_breaks) - 1), breaks = mat_breaks)
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 11)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= heat(length(mat_breaks) - 1), breaks = mat_breaks)
# Retain genes whose sum relative abundance above 0.0025
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_Gene)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
colnames(heat.df)
heat_tax = as(tax_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# swap colnames
colnames(heat.df)=colnames(heat_tax)
# transpose
heat.t <- t(heat.df)
View(heat.t)
View(heat)
quantile_breaks <- function(xs, n = 50) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 50)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 100)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
quantile_breaks <- function(xs, n = 10) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 10)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 100)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 10), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 10), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 2), breaks = mat_breaks)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks)
pheatmap(mat=log10(heat.t), cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
pheatmap(mat=log10(heat.t), cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
View(heat.t)
giveNAs = which(is.na(as.matrix(dist(heat.t))),arr.ind=TRUE)
head(giveNAs)
pheatmap(mat=log10(heat.t), cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), cluster_rows = F, cluster_cols = F)
str(log10(heat.t))
log_trans_heat <- as.numeric(log10(heat.t))
pheatmap(log_trans_heat, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), cluster_rows = F, cluster_cols = F)
pheatmap(log10(heat.t), cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), cluster_rows = F, cluster_cols = F)
vector = as.numeric(log_trans_heat[,2])
vector = as.numeric(log_trans_heat[,1])
vector = as.numeric(log_trans_heat)
View(vector)
heat.t_log <- log10(heat.t + 1)
pheatmap(log10(heat.t_log), cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), cluster_rows = F, cluster_cols = F)
pheatmap(heat.t_log, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), cluster_rows = F, cluster_cols = F)
pheatmap(heat.t_log, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50), cluster_rows = F, cluster_cols = F)
pheatmap(heat.t_log, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), cluster_rows = F, cluster_cols = F, breaks = mat_breaks)
pheatmap(heat.t_log, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), cluster_rows = F, cluster_cols = F, breaks = mat_breaks)
colnames(heat.t)
col.names <- colnames(heat.t)
View(col.names)
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Save counts without gene names
#write.table(ARG_genemat, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=T, sep = "\t", col.names = T)
#ARG_genemat_counts <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=NULL)
#ARG_genemat_counts$row.names<-NULL
ARG_genemat_norm <- t(t(ARG_genemat)/metadata$SSU_counts)
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[10], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# Have a quick look
plot_bar(otu_table(resfinder_PHY))
# There are the suspicious samples (BH02, BH27, BH30).
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
resfinder_PHY_ast = subset_samples(resfinder_PHY, "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
resfinder_PHY_ast = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
any(taxa_sums(resfinder_PHY_ast) == 0)
resfinder_PHY_ast <- prune_taxa(taxa_sums(resfinder_PHY_ast) > 0, resfinder_PHY_ast)
any(taxa_sums(resfinder_PHY_ast) == 0)
# Prepare data
resfinder_PHY_Gene <- tax_glom(resfinder_PHY_ast, taxrank = "Gene")
# Retain genes whose sum relative abundance above 0.0025
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_Gene)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# swap colnames
colnames(heat.df)=colnames(heat_tax)
# transpose
heat.t <- t(heat.df)
## set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 100)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks, annotation_col = mat_col, annotation_colors = mat_colors)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks,
#annotation_col = mat_col, annotation_colors = mat_colors
)
)
)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks,
#annotation_col = mat_col, annotation_colors = mat_colors
)
col.names <- colnames(heat.t)
View(col.names)
annotation = data.frame("annotations.txt")
View(annotation)
annotation <- data.frame("annotations.txt")
View(annotation)
annotations <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/annotations.txt", header=FALSE, row.names=1)
View(annotations)
View(annottations)
View(annotations)
annotation$V2 = factor(annotation$V2, levels = c("Benin", "Burkina Faso", "Finland"))
annotations <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/annotations.txt", header=T)
annotation$country = factor(annotation$country, levels = c("Benin", "Burkina Faso", "Finland"))
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 100)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks,
#annotation_col = mat_col, annotation_colors = mat_colors
)
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 100)
pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks,
#annotation_col = mat_col, annotation_colors = mat_colors
)
df <- read.delim("annot.txt", sep = "")
Voe
View(df)
annot <- read.delim("annot.txt", sep = "", row.names = 1, header = T)
View(annot)
annot <- read.delim("annot.txt", sep = "", row.names = 1, header = T)
View(annot)
annot <- read.delim("annot.txt", header = T, row.names = 1)
heat.df$country <- annot$country
View(haet.df)
View(heat.df)
heat.df$country <- annot [,1]
View(heat.df)
View(annot)
heat.df$country <- annot
View(heat.df)
heat.df$country <- annot$country
View(heat.df)
heat.df$country <- c("Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Finland", "Benin", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Finland", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Finland", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Benin", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Finland", "Burkina_Faso", "Burkina_Faso", "Finland", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Finland", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso")
View(heat.df)
heat.df$country <- annot$country
View(heat.df)
annot <- data.frame("annot.txt", header=T, row.names = 1)
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_Gene)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(resfinder_PHY_Gene_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
View(heat.df)
annot <- data.frame("annot.txt", header=T, row.names = 1)
View(heat.df)
heat.df$country <- annot$country
View(heat.df)
heat.df$country <- annot$country
View(heat.df)
heat.df$country <- c("Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Finland", "Benin", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Finland", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Finland", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Benin", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Finland", "Burkina_Faso", "Burkina_Faso", "Finland", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Finland", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso")
View(heat.df)
heat.t <- t(heat.df)
View(heat.t)
heat.t <- t(heat.df)
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
## set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 100)
heat_num = as.matrix(heat.t[1:105,])
View(heat_num)
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:105,])
## set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
str(heat_num)
str(heat.t)
View(heat.df)
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:105,])
## set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
# Retain genes whose sum relative abundance above 0.0025
minTotRelAbun = 0.0025
x = taxa_sums(resfinder_PHY_Gene)
keepTaxa = taxa_names(resfinder_PHY_Gene)[which((x / sum(x)) > minTotRelAbun)]
resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_Gene)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(resfinder_PHY_Gene_heat), "matrix")
# transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
colnames(heat.df)
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(resfinder_PHY_Gene_heat), "matrix")
# Transpose if necessary
if(taxa_are_rows(resfinder_PHY_Gene_heat)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
heat.t <- t(heat.df)
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat.t, n = 100)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks,
#annotation_col = mat_col, annotation_colors = mat_colors
)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
#annot <- data.frame("annot.txt", header=T, row.names = 1)
heat.df$country <- c("Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Finland", "Benin", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Finland", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Burkina_Faso", "Benin", "Finland", "Benin", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Benin", "Benin", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Burkina_Faso", "Benin", "Burkina_Faso", "Benin", "Finland", "Burkina_Faso", "Burkina_Faso", "Finland", "Burkina_Faso", "Finland", "Benin", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Benin", "Burkina_Faso", "Finland", "Burkina_Faso", "Benin", "Benin", "Burkina_Faso", "Burkina_Faso")
# Transpose
heat.t <- t(heat.df)
heat_num = as.numeric(as.matrix(heat.t[1:105,]))
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks,
#annotation_col = mat_col, annotation_colors = mat_colors
)
View(heat_num)
heat_num = as.numeric(heat.t[1:105,])
View(heat_num)
heat_num = as.matrix(heat.t[1:105,])
View(heat_num)
heat_num = as.numeric(heat_num)
View(heat_num)
View(heat_num)
heat_num = as.matrix(heat.t[1:105,])
View(heat_num)
class(heat_num) <- "numeric"
View(heat_num)
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
pheatmap(heat_num, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(length(mat_breaks) - 1), breaks = mat_breaks,
#annotation_col = mat_col, annotation_colors = mat_colors
)
