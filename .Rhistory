## Plot
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= blue(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= blues9(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= heat(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= magma(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= magma(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= blues(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= brewer_blues(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= brewerblues(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
??pheatmap
display.brewer.all()
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= "Blues", annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
display.brewer.all()
my_colors = brewer.pal(n = 11, name = "Blues")
my_colors = colorRampPalette(my_colors)(50)
my_colors = rev(my_colors)
my_colors = brewer.pal(n = 9, name = "Blues")
my_colors = colorRampPalette(my_colors)(50)
my_colors = rev(my_colors)
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= mycolors, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
my_colors = brewer.pal(n = 9, name = "Blues")
my_colors = colorRampPalette(my_colors)(50)
my_colors = rev(my_colors)
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= mycolors, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
my_colors
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= mycolors(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= my_colors(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= my_colors, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= my_colors, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
display.brewer.all()
my_colors = brewer.pal(n = 9, name = "YlOrRd")
my_colors = colorRampPalette(my_colors)(50)
my_colors = rev(my_colors)
## Plot
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= my_colors, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= my_colors, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
my_colors
my_colors = brewer.pal(rev(n = 9, name = "YlOrRd"))
my_colors = brewer.pal(n = 9, name = "YlOrRd", trans="reverse")
??brewer.pal
my_colors = brewer.pal(n = 9, name = "YlOrRd", direction=-1)
my_colors = brewer.pal(n = 9, name = "YlOrRd", direction=-1, h.start=10)
my_colors = colorRampPalette(my_colors, direction = -1)(50)
View(ARG_genemat)
## List of genes of interest
gen_to_keep <- c("aac(6')-30-aac(6')-Ib'_1_AJ584652", "aac(6')-Ib-Suzhou_1_EU085533", "aadA13_2_NC010643", "aadA2_1_NC_010870", "aph(6)-Id_1_M28829", "aph(3'')-Ib_3_AF321550", "ant(2'')-Ia_2_JF826500", "aac(3)-IIa_1_X51534", "aac(6')-Ib_1_M21682", "aac(6')-aph(2'')_1_M13771", "ant(3'')-Ia_1_X02340", "aadA1b_1_M95287", "aadA13_1_AY713504", "aph(2'')-Id_1_AF016483", "aac(6')-Ib-cr_1_DQ303918", "str_1_X92946", "blaOXA-347_1_ACWG01000053", "blaOXA-415_1_KJ865754", "blaOXA-420_1_AB983359", "blaOXA-534_1_KX714285", "blaOXA-540_1_KJ138219", "blaACT-4_2_AJ311172", "blaCMY-2_1_X91840", "blaCMY-41_1_AB429270", "blaCMY-94_1_JX514368", "blaCTX-M-1_1_DQ915955", "blaCTX-M-14_1_AF252622", "blaCTX-M-28_6_AJ549244", "blaCTX-M-46_1_AY847147", "blaCTX-M-142_1_KF240809", "blaCTX-M-8_1_AF189721", "blaDHA-1_1_Y16410", "blaFOX-2_1_Y10282", "blaKPC-2_1_AY034847", "blaKPC-3_1_HM769262", "blaMOX-2_1_AJ276453", "blaOXA-1_1_HQ170510", "blaOXA-5_1_AF347074", "blaOXA-10_1_J03427", "blaOXA-101_1_AM412777", "blaOXA-119_1_DQ767903", "blaOXA-129_1_FJWZ01000025", "blaOXA-145_1_FJ790516", "blaOXA-181_1_CM004561", "blaOXA-240_1_JX089628", "blaOXA-256_1_HE616889", "blaOXA-320_1_KF151169", "blaTEM-1B_1_AY458016", "blaVEB-1_1_HM370393", "blaNPS_1_AY027589", "blaAER-1_1_U14748", "cfxA_1_U38243", "blaIMP-1_1_EF027105", "blaIMP-15_1_AY553333", "blaVIM-5_1_DQ023222", "blaVIM-38_1_KC469971", "blaNDM-1_1_FN396876", "blaGES-1_1_HQ170511", "blaGES-5_1_DQ236171", "blaOXA-296_1_APOH01000009", "blaOXA-246_1_EU886980", "blaCTX-M-150_1_KF769131", "blaCTX-M-156_1_KM211509", "blaCTX-M-211_1_MH067961", "blaCTX-M-2_1_AB176535", "blaCTX-M-3_1_Y10278", "blaCTX-M-15_1_AY044436", "blaCMY-4_1_LNHZ01000079", "blaTEM-215_1_KP050492", "blaSHV-11_1_X98101", "blaCARB-4_1_FJ785525", "blaCMY-150_2_NG_060513", "blaPAU-1_1_MH053445", "mcr-1.1_1_KP347127", "mcr-3.1_1_KY924928", "mcr-3.12_1_MG564491", "mcr-3.15_1_MH332765", "mcr-7.1_1_MG267386", "fosA_7_AEXB01000013", "VanA_bc_1_Y15704", "ere(A)_6_DQ157752", "ere(D)_1_KP265721", "erm(A)_2_AF002716", "erm(B)_1_JN899585", "erm(B)_18_X66468", "erm(F)_3_M17808", "erm(G)_1_M15332", "mef(A)_4_HG423652", "msr(E)_1_FR751518", "ere(A)_1_AY183453", "lnu(F)_3_AJ561197", "mph(A)_1_D16251", "mph(E)_1_DQ839391", "mef(C)_1_AB571865", "mdf(A)_1_Y08743", "lsa(E)_1_JX560992", "nimA_1_X71444", "nimE_1_AM042593", "catB3_2_U13880", "catB8_1_AF227506", "cat_2_M35190", "cmlA1_1_M64556", "floR_1_AF071555", "qnrA1_1_AY070235", "qnrB42_1_JN680743", "qnrS2_1_DQ485530", "ARR-3_4_FM207631", "sul1_2_U12338", "sul2_1_AF542061", "sul3_2_AJ459418", "tet(39)_1_KT346360", "tet(36)_1_AJ514254", "tet(A)_4_AJ517790", "tet(G)_2_AF133140", "tet(C)_2_AY046276", "tet(M)_8_X04388", "tet(Q)_1_L33696", "dfrA14_1_KF921535", "dfrA1_3_GU726913")
subset = subset_taxa(resfinder_PHY_Gene, Gene %in% gen_to_keep)
# Retain genes whose sum relative abundance above 0.0025
#minTotRelAbun = 0.0025
#x = taxa_sums(resfinder_PHY_betalactam)
#keepTaxa = taxa_names(resfinder_PHY_betalactam)[which((x / sum(x)) > minTotRelAbun)]
#resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_betalactam)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(subset), "matrix")
# transpose if necessary
if(taxa_are_rows(subset)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(subset), "matrix")
# Transpose if necessary
if(taxa_are_rows(subset)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
# Transpose
heat.t <- t(heat.df)
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#9E42F9", Benin="#F94C31", Finland="#86F1FA"),
sample_type = c(waste_water = "white", human_feces = "#38B13E", well_water = "grey", river_water= "#F99D34", clean_water= "#D5EDF3", tap_water= "#9797D7", sludge = "#27D5FC", sandy_sediment_sludge = "#AE192E", soil = "lightblue", sediment_sludge = "#74BC97"))
# If red wanted, need to be inverted tho
#my_colors = brewer.pal(n = 9, name = "YlOrRd")
#my_colors = colorRampPalette(my_colors)(50)
#my_colors = rev(my_colors)
#my_colors
## Plot
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= my_colors, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.0, cellheight = 6.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 3.5, cellheight = 3.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 3.5, cellheight = 3.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 2.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 2.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 3.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 3.5, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#9E42F9", Benin="#F94C31", Finland="#86F1FA"),
sample_type = c(waste_water = "white", human_feces = "#38B13E", well_water = "grey", river_water= "#F99D34", clean_water= "#D5EDF3", tap_water= "#9797D7", sludge = "#27D5FC", sandy_sediment_sludge = "#AE192E", soil = "lightblue", sediment_sludge = "#74BC97"))
## Plot
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 3.0, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 3.0, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 3.0, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 3.0, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.0, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.0, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.2, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.2, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= colorRampPalette(c("navy", "white", "firebrick3")(50)), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= colorRampPalette(c("navy", "white", "firebrick3"), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= colorRampPalette(c("navy", "white", "firebrick3")), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= colorRampPalette(c("navy", "white", "firebrick3")(50)), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= colorRampPalette(c("navy", "white", "firebrick3")(50)), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#9E42F9", Benin="#F94C31", Finland="#86F1FA"),
sample_type = c(waste_water = "white", human_feces = "#38B13E", well_water = "grey", river_water= "#F99D34", clean_water= "#D5EDF3", tap_water= "#9797D7", sludge = "#27D5FC", sandy_sediment_sludge = "#AE192E", soil = "lightblue", sediment_sludge = "#74BC97"))
## Plot
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
resfinder_PHY_Gene <- subset_samples(resfinder_PHY_Gene, name!="BH58_S113" & name!="BH59_S114"& name!="BH60_S115")
View(resfinder_PHY)
resfinder_PHY_Gene = subset_samples(resfinder_PHY_Gene, name!="BH58_S113" & name!="BH59_S114"& name!="BH60_S115")
View(resfinder_PHY)
resfinder_PHY_Gene_filt = subset_samples(resfinder_PHY_Gene, name!="BH58_S113" & name!="BH59_S114"& name!="BH60_S115")
resfinder_PHY_Gene_filt
resfinder_PHY_Gene <- tax_glom(resfinder_PHY_ast, taxrank = "Gene")
resfinder_PHY_Gene_filt = subset_samples(resfinder_PHY_Gene, name!="BH58_S113" & name!="BH59_S114"& name!="BH60_S115")
resfinder_PHY_Gene_filt
## List of genes of interest
gen_to_keep <- c("aac(6')-30-aac(6')-Ib'_1_AJ584652", "aac(6')-Ib-Suzhou_1_EU085533", "aadA13_2_NC010643", "aadA2_1_NC_010870", "aph(6)-Id_1_M28829", "aph(3'')-Ib_3_AF321550", "ant(2'')-Ia_2_JF826500", "aac(3)-IIa_1_X51534", "aac(6')-Ib_1_M21682", "aac(6')-aph(2'')_1_M13771", "ant(3'')-Ia_1_X02340", "aadA1b_1_M95287", "aadA13_1_AY713504", "aph(2'')-Id_1_AF016483", "aac(6')-Ib-cr_1_DQ303918", "str_1_X92946", "blaOXA-347_1_ACWG01000053", "blaOXA-415_1_KJ865754", "blaOXA-420_1_AB983359", "blaOXA-534_1_KX714285", "blaOXA-540_1_KJ138219", "blaACT-4_2_AJ311172", "blaCMY-2_1_X91840", "blaCMY-41_1_AB429270", "blaCMY-94_1_JX514368", "blaCTX-M-1_1_DQ915955", "blaCTX-M-14_1_AF252622", "blaCTX-M-28_6_AJ549244", "blaCTX-M-46_1_AY847147", "blaCTX-M-142_1_KF240809", "blaCTX-M-8_1_AF189721", "blaDHA-1_1_Y16410", "blaFOX-2_1_Y10282", "blaKPC-2_1_AY034847", "blaKPC-3_1_HM769262", "blaMOX-2_1_AJ276453", "blaOXA-1_1_HQ170510", "blaOXA-5_1_AF347074", "blaOXA-10_1_J03427", "blaOXA-101_1_AM412777", "blaOXA-119_1_DQ767903", "blaOXA-129_1_FJWZ01000025", "blaOXA-145_1_FJ790516", "blaOXA-181_1_CM004561", "blaOXA-240_1_JX089628", "blaOXA-256_1_HE616889", "blaOXA-320_1_KF151169", "blaTEM-1B_1_AY458016", "blaVEB-1_1_HM370393", "blaNPS_1_AY027589", "blaAER-1_1_U14748", "cfxA_1_U38243", "blaIMP-1_1_EF027105", "blaIMP-15_1_AY553333", "blaVIM-5_1_DQ023222", "blaVIM-38_1_KC469971", "blaNDM-1_1_FN396876", "blaGES-1_1_HQ170511", "blaGES-5_1_DQ236171", "blaOXA-296_1_APOH01000009", "blaOXA-246_1_EU886980", "blaCTX-M-150_1_KF769131", "blaCTX-M-156_1_KM211509", "blaCTX-M-211_1_MH067961", "blaCTX-M-2_1_AB176535", "blaCTX-M-3_1_Y10278", "blaCTX-M-15_1_AY044436", "blaCMY-4_1_LNHZ01000079", "blaTEM-215_1_KP050492", "blaSHV-11_1_X98101", "blaCARB-4_1_FJ785525", "blaCMY-150_2_NG_060513", "blaPAU-1_1_MH053445", "mcr-1.1_1_KP347127", "mcr-3.1_1_KY924928", "mcr-3.12_1_MG564491", "mcr-3.15_1_MH332765", "mcr-7.1_1_MG267386", "fosA_7_AEXB01000013", "VanA_bc_1_Y15704", "ere(A)_6_DQ157752", "ere(D)_1_KP265721", "erm(A)_2_AF002716", "erm(B)_1_JN899585", "erm(B)_18_X66468", "erm(F)_3_M17808", "erm(G)_1_M15332", "mef(A)_4_HG423652", "msr(E)_1_FR751518", "ere(A)_1_AY183453", "lnu(F)_3_AJ561197", "mph(A)_1_D16251", "mph(E)_1_DQ839391", "mef(C)_1_AB571865", "mdf(A)_1_Y08743", "lsa(E)_1_JX560992", "nimA_1_X71444", "nimE_1_AM042593", "catB3_2_U13880", "catB8_1_AF227506", "cat_2_M35190", "cmlA1_1_M64556", "floR_1_AF071555", "qnrA1_1_AY070235", "qnrB42_1_JN680743", "qnrS2_1_DQ485530", "ARR-3_4_FM207631", "sul1_2_U12338", "sul2_1_AF542061", "sul3_2_AJ459418", "tet(39)_1_KT346360", "tet(36)_1_AJ514254", "tet(A)_4_AJ517790", "tet(G)_2_AF133140", "tet(C)_2_AY046276", "tet(M)_8_X04388", "tet(Q)_1_L33696", "dfrA14_1_KF921535", "dfrA1_3_GU726913")
subset = subset_taxa(resfinder_PHY_Gene_filt, Gene %in% gen_to_keep)
# Retain genes whose sum relative abundance above 0.0025
#minTotRelAbun = 0.0025
#x = taxa_sums(resfinder_PHY_betalactam)
#keepTaxa = taxa_names(resfinder_PHY_betalactam)[which((x / sum(x)) > minTotRelAbun)]
#resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_betalactam)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(subset), "matrix")
# transpose if necessary
if(taxa_are_rows(subset)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(subset), "matrix")
# Transpose if necessary
if(taxa_are_rows(subset)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
annot_filt <- read.delim("annot_filt.txt", header = T)
annot <- read.delim("annot_filt.txt", header = T)
heat.df$country <- annot$country
annot <- read.delim("annot_filt.txt", header = T)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
heat.t <- t(heat.df)
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
rownames(annot_col) = colnames(heat_num)
View(annot)
## List of genes of interest
gen_to_keep <- c("aac(6')-30-aac(6')-Ib'_1_AJ584652", "aac(6')-Ib-Suzhou_1_EU085533", "aadA13_2_NC010643", "aadA2_1_NC_010870", "aph(6)-Id_1_M28829", "aph(3'')-Ib_3_AF321550", "ant(2'')-Ia_2_JF826500", "aac(3)-IIa_1_X51534", "aac(6')-Ib_1_M21682", "aac(6')-aph(2'')_1_M13771", "ant(3'')-Ia_1_X02340", "aadA1b_1_M95287", "aadA13_1_AY713504", "aph(2'')-Id_1_AF016483", "aac(6')-Ib-cr_1_DQ303918", "str_1_X92946", "blaOXA-347_1_ACWG01000053", "blaOXA-415_1_KJ865754", "blaOXA-420_1_AB983359", "blaOXA-534_1_KX714285", "blaOXA-540_1_KJ138219", "blaACT-4_2_AJ311172", "blaCMY-2_1_X91840", "blaCMY-41_1_AB429270", "blaCMY-94_1_JX514368", "blaCTX-M-1_1_DQ915955", "blaCTX-M-14_1_AF252622", "blaCTX-M-28_6_AJ549244", "blaCTX-M-46_1_AY847147", "blaCTX-M-142_1_KF240809", "blaCTX-M-8_1_AF189721", "blaDHA-1_1_Y16410", "blaFOX-2_1_Y10282", "blaKPC-2_1_AY034847", "blaKPC-3_1_HM769262", "blaMOX-2_1_AJ276453", "blaOXA-1_1_HQ170510", "blaOXA-5_1_AF347074", "blaOXA-10_1_J03427", "blaOXA-101_1_AM412777", "blaOXA-119_1_DQ767903", "blaOXA-129_1_FJWZ01000025", "blaOXA-145_1_FJ790516", "blaOXA-181_1_CM004561", "blaOXA-240_1_JX089628", "blaOXA-256_1_HE616889", "blaOXA-320_1_KF151169", "blaTEM-1B_1_AY458016", "blaVEB-1_1_HM370393", "blaNPS_1_AY027589", "blaAER-1_1_U14748", "cfxA_1_U38243", "blaIMP-1_1_EF027105", "blaIMP-15_1_AY553333", "blaVIM-5_1_DQ023222", "blaVIM-38_1_KC469971", "blaNDM-1_1_FN396876", "blaGES-1_1_HQ170511", "blaGES-5_1_DQ236171", "blaOXA-296_1_APOH01000009", "blaOXA-246_1_EU886980", "blaCTX-M-150_1_KF769131", "blaCTX-M-156_1_KM211509", "blaCTX-M-211_1_MH067961", "blaCTX-M-2_1_AB176535", "blaCTX-M-3_1_Y10278", "blaCTX-M-15_1_AY044436", "blaCMY-4_1_LNHZ01000079", "blaTEM-215_1_KP050492", "blaSHV-11_1_X98101", "blaCARB-4_1_FJ785525", "blaCMY-150_2_NG_060513", "blaPAU-1_1_MH053445", "mcr-1.1_1_KP347127", "mcr-3.1_1_KY924928", "mcr-3.12_1_MG564491", "mcr-3.15_1_MH332765", "mcr-7.1_1_MG267386", "fosA_7_AEXB01000013", "VanA_bc_1_Y15704", "ere(A)_6_DQ157752", "ere(D)_1_KP265721", "erm(A)_2_AF002716", "erm(B)_1_JN899585", "erm(B)_18_X66468", "erm(F)_3_M17808", "erm(G)_1_M15332", "mef(A)_4_HG423652", "msr(E)_1_FR751518", "ere(A)_1_AY183453", "lnu(F)_3_AJ561197", "mph(A)_1_D16251", "mph(E)_1_DQ839391", "mef(C)_1_AB571865", "mdf(A)_1_Y08743", "lsa(E)_1_JX560992", "nimA_1_X71444", "nimE_1_AM042593", "catB3_2_U13880", "catB8_1_AF227506", "cat_2_M35190", "cmlA1_1_M64556", "floR_1_AF071555", "qnrA1_1_AY070235", "qnrB42_1_JN680743", "qnrS2_1_DQ485530", "ARR-3_4_FM207631", "sul1_2_U12338", "sul2_1_AF542061", "sul3_2_AJ459418", "tet(39)_1_KT346360", "tet(36)_1_AJ514254", "tet(A)_4_AJ517790", "tet(G)_2_AF133140", "tet(C)_2_AY046276", "tet(M)_8_X04388", "tet(Q)_1_L33696", "dfrA14_1_KF921535", "dfrA1_3_GU726913")
subset = subset_taxa(resfinder_PHY_Gene_filt, Gene %in% gen_to_keep)
# Retain genes whose sum relative abundance above 0.0025
#minTotRelAbun = 0.0025
#x = taxa_sums(resfinder_PHY_betalactam)
#keepTaxa = taxa_names(resfinder_PHY_betalactam)[which((x / sum(x)) > minTotRelAbun)]
#resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_betalactam)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(subset), "matrix")
# transpose if necessary
if(taxa_are_rows(subset)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(subset), "matrix")
# Transpose if necessary
if(taxa_are_rows(subset)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
colnames(heat.df)=colnames(heat_tax)
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
resfinder_PHY_Gene <- tax_glom(resfinder_PHY_ast, taxrank = "Gene")
## List of genes of interest
gen_to_keep <- c("aac(6')-30-aac(6')-Ib'_1_AJ584652", "aac(6')-Ib-Suzhou_1_EU085533", "aadA13_2_NC010643", "aadA2_1_NC_010870", "aph(6)-Id_1_M28829", "aph(3'')-Ib_3_AF321550", "ant(2'')-Ia_2_JF826500", "aac(3)-IIa_1_X51534", "aac(6')-Ib_1_M21682", "aac(6')-aph(2'')_1_M13771", "ant(3'')-Ia_1_X02340", "aadA1b_1_M95287", "aadA13_1_AY713504", "aph(2'')-Id_1_AF016483", "aac(6')-Ib-cr_1_DQ303918", "str_1_X92946", "blaOXA-347_1_ACWG01000053", "blaOXA-415_1_KJ865754", "blaOXA-420_1_AB983359", "blaOXA-534_1_KX714285", "blaOXA-540_1_KJ138219", "blaACT-4_2_AJ311172", "blaCMY-2_1_X91840", "blaCMY-41_1_AB429270", "blaCMY-94_1_JX514368", "blaCTX-M-1_1_DQ915955", "blaCTX-M-14_1_AF252622", "blaCTX-M-28_6_AJ549244", "blaCTX-M-46_1_AY847147", "blaCTX-M-142_1_KF240809", "blaCTX-M-8_1_AF189721", "blaDHA-1_1_Y16410", "blaFOX-2_1_Y10282", "blaKPC-2_1_AY034847", "blaKPC-3_1_HM769262", "blaMOX-2_1_AJ276453", "blaOXA-1_1_HQ170510", "blaOXA-5_1_AF347074", "blaOXA-10_1_J03427", "blaOXA-101_1_AM412777", "blaOXA-119_1_DQ767903", "blaOXA-129_1_FJWZ01000025", "blaOXA-145_1_FJ790516", "blaOXA-181_1_CM004561", "blaOXA-240_1_JX089628", "blaOXA-256_1_HE616889", "blaOXA-320_1_KF151169", "blaTEM-1B_1_AY458016", "blaVEB-1_1_HM370393", "blaNPS_1_AY027589", "blaAER-1_1_U14748", "cfxA_1_U38243", "blaIMP-1_1_EF027105", "blaIMP-15_1_AY553333", "blaVIM-5_1_DQ023222", "blaVIM-38_1_KC469971", "blaNDM-1_1_FN396876", "blaGES-1_1_HQ170511", "blaGES-5_1_DQ236171", "blaOXA-296_1_APOH01000009", "blaOXA-246_1_EU886980", "blaCTX-M-150_1_KF769131", "blaCTX-M-156_1_KM211509", "blaCTX-M-211_1_MH067961", "blaCTX-M-2_1_AB176535", "blaCTX-M-3_1_Y10278", "blaCTX-M-15_1_AY044436", "blaCMY-4_1_LNHZ01000079", "blaTEM-215_1_KP050492", "blaSHV-11_1_X98101", "blaCARB-4_1_FJ785525", "blaCMY-150_2_NG_060513", "blaPAU-1_1_MH053445", "mcr-1.1_1_KP347127", "mcr-3.1_1_KY924928", "mcr-3.12_1_MG564491", "mcr-3.15_1_MH332765", "mcr-7.1_1_MG267386", "fosA_7_AEXB01000013", "VanA_bc_1_Y15704", "ere(A)_6_DQ157752", "ere(D)_1_KP265721", "erm(A)_2_AF002716", "erm(B)_1_JN899585", "erm(B)_18_X66468", "erm(F)_3_M17808", "erm(G)_1_M15332", "mef(A)_4_HG423652", "msr(E)_1_FR751518", "ere(A)_1_AY183453", "lnu(F)_3_AJ561197", "mph(A)_1_D16251", "mph(E)_1_DQ839391", "mef(C)_1_AB571865", "mdf(A)_1_Y08743", "lsa(E)_1_JX560992", "nimA_1_X71444", "nimE_1_AM042593", "catB3_2_U13880", "catB8_1_AF227506", "cat_2_M35190", "cmlA1_1_M64556", "floR_1_AF071555", "qnrA1_1_AY070235", "qnrB42_1_JN680743", "qnrS2_1_DQ485530", "ARR-3_4_FM207631", "sul1_2_U12338", "sul2_1_AF542061", "sul3_2_AJ459418", "tet(39)_1_KT346360", "tet(36)_1_AJ514254", "tet(A)_4_AJ517790", "tet(G)_2_AF133140", "tet(C)_2_AY046276", "tet(M)_8_X04388", "tet(Q)_1_L33696", "dfrA14_1_KF921535", "dfrA1_3_GU726913")
subset = subset_taxa(resfinder_PHY_Gene, Gene %in% gen_to_keep)
# Retain genes whose sum relative abundance above 0.0025
#minTotRelAbun = 0.0025
#x = taxa_sums(resfinder_PHY_betalactam)
#keepTaxa = taxa_names(resfinder_PHY_betalactam)[which((x / sum(x)) > minTotRelAbun)]
#resfinder_PHY_Gene_heat = prune_taxa(keepTaxa, resfinder_PHY_betalactam)
# Extract abundance matrix from the phyloseq object
heat_OTU = as(otu_table(subset), "matrix")
# transpose if necessary
if(taxa_are_rows(subset)){heat_OTU <- t(heat_OTU)}
# Coerce to data.frame
heat.df = as.data.frame(heat_OTU)
# Change otu names from sp* into gene names
colnames(heat.df)
# So same to the tax_table
# Extract abundance matrix from the phyloseq object
heat_tax = as(tax_table(subset), "matrix")
# Transpose if necessary
if(taxa_are_rows(subset)){heat_tax <- t(heat_tax)}
# Save to get it back without the current first header row
write.table(heat_tax, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=T, sep = "\t", col.names = F)
heat_tax <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/heat_tax", row.names=1)
# Swap colnames
colnames(heat.df)=colnames(heat_tax)
# Add row for annotation data
annot <- read.delim("annot.txt", header = T)
heat.df$country <- annot$country
heat.df$sample_type <- annot$sample_type
heat.df$location <- annot$location
# Transpose
heat.t <- t(heat.df)
# Now to the actual heatmap
#pheatmap(heat.t, cluster_rows = T, cluster_cols = T, cellwidth = 5, cellheight = 5, border_color = "black", fontsize=5, color= inferno(50))
# Exclude annotation
heat_num = as.matrix(heat.t[1:115,])
# Back from charachter into numeric
class(heat_num) <- "numeric"
## Set annotation
annot_col = data.frame(heat.df$country, heat.df$sample_type, heat.df$location)
## Check that the names match
rownames(annot_col) = colnames(heat_num)
## Rename col names
colnames(annot_col) <- c("country", "sample_type", "location")
## Set breaks
quantile_breaks <- function(xs, n = 100) {
breaks <- quantile(xs, probs = seq(0, 1, length.out = n))
breaks[!duplicated(breaks)]
}
mat_breaks <- quantile_breaks(heat_num, n = 100)
# Set colors for annotations
ann_colors = list(
country = c(Burkina_Faso = "#9E42F9", Benin="#F94C31", Finland="#86F1FA"),
sample_type = c(waste_water = "white", human_feces = "#38B13E", well_water = "grey", river_water= "#F99D34", clean_water= "#D5EDF3", tap_water= "#9797D7", sludge = "#27D5FC", sandy_sediment_sludge = "#AE192E", soil = "lightblue", sediment_sludge = "#74BC97"))
## Plot
pheatmap(heat_num, cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(length(mat_breaks)-1), breaks= mat_breaks, annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
pheatmap(sqrt(heat_num), cluster_rows = F, cluster_cols = T, cellwidth = 5.5, cellheight = 4.1, border_color = "black", fontsize=5, color= inferno(50), annotation_colors = ann_colors, annotation_col = annot_col, main = "x")
ARG_genemat_norm <- t(t(ARG_genemat)/metadata$SSU_counts)
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# Have a quick look
plot_bar(otu_table(resfinder_PHY))
# There are the suspicious samples (BH02, BH27, BH30).
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
#resfinder_PHY_ww = subset_samples(resfinder_PHY_hosp, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Or alternatively include fecal but exclude suspicious samples
resfinder_PHY_ast = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Suspicious samples (very high ARG level) (BH02_S77, BH27_S92, BH30_S94)
#resfinder_PHY_clean = subset_samples(resfinder_PHY_ww, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Savalou area samples
#resfinder_PHY_hosp = subset_samples(resfinder_PHY_ast, name != "BSE100_S122" & name != "BSE79_S120" & name != "BSE74_S119" & name != "BSE93_S121")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY_ast) == 0)
resfinder_PHY_ast <- prune_taxa(taxa_sums(resfinder_PHY_ast) > 0, resfinder_PHY_ast)
any(taxa_sums(resfinder_PHY_ast) == 0)
mean16S_counts <- mean(metadata$SSU_counts, invert = TRUE)
View(mean16S_counts)
mean16S_counts <- mean(metadata$SSU_counts, invert = F)
View(mean16S_counts)
mean16S_counts <- mean(SSU_counts[grep("RM", row.names(metadata$SSU_counts), invert = TRUE),
])
View(metadata$SSU_counts)
mean16S_counts <- mean(metadata$SSU_counts[grep("RM", row.names(metadata$SSU_counts), invert = TRUE),])
mean16S_counts <- mean(metadata$SSU_counts[grep("RM", row.names(metadata$SSU_counts), invert = TRUE),
])
mean16S_counts <- mean(metadata$SSU_counts)
View(mean16S_counts)
View(mean16S_counts)
View(metadata)
test <- metadata[!grepl("BFH24_S142",metadata$SSU_counts),]
View(test)
test <- metadata$SSU_counts[!grepl("BFH24_S142",metadata$SSU_counts),]
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
country = sample_data(resfinder_PHY_ast)$location)
plot(lo_data$SUM~lo_data$location, cex.axis=0.5, srt=45, las=2, xlab=NULL)
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
country = sample_data(resfinder_PHY_ast)$country)
plot(lo_data$SUM~lo_data$country, cex.axis=0.5, srt=45, las=2, xlab=NULL)
sample_sums(resfinder_PHY)
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat taxa_are_rows = TRUE), sample_data(metadata),
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Save counts without gene names
#write.table(ARG_genemat, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=T, sep = "\t", col.names = T)
#ARG_genemat_counts <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=NULL)
#ARG_genemat_counts$row.names<-NULL
ARG_genemat_norm <- t(t(ARG_genemat)/metadata$SSU_counts)
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
ARG_genemat <- t(ARG_genemat)
resfinder_PHY <- phyloseq(otu_table(ARG_genemat, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_genemat <- t(t(ARG_genemat))
resfinder_PHY <- phyloseq(otu_table(ARG_genemat, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
ARG_genemat <- t(t(ARG_genemat))
resfinder_PHY <- phyloseq(otu_table(ARG_genemat, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
ARG_genemat_notnorm <- t(t(ARG_genemat))
write.table(ARG_genemat_notnorm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_notnorm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_notnorm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_notnorm.txt", row.names=NULL)
ARG_genemat_notnorm$row.names<-NULL
resfinder_PHY_notnorm <- phyloseq(otu_table(ARG_genemat_notnorm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
resfinder_PHY = subset_samples(resfinder_PHY_notnorm, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
resfinder_PHY_ast = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
mean16S_counts <- mean(metadata$SSU_counts)
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
country = sample_data(resfinder_PHY_ast)$country)
plot(lo_data$SUM~lo_data$country, cex.axis=0.5, srt=45, las=2, xlab=NULL)
ARG_genemat_norm <- t(t(ARG_genemat)/metadata$SSU_counts)
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# Have a quick look
plot_bar(otu_table(resfinder_PHY))
# There are the suspicious samples (BH02, BH27, BH30).
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Save counts without gene names
#write.table(ARG_genemat, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=T, sep = "\t", col.names = T)
#ARG_genemat_counts <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_counts", row.names=NULL)
#ARG_genemat_counts$row.names<-NULL
ARG_genemat_norm <- t(t(ARG_genemat)/metadata$SSU_counts)
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# Have a quick look
plot_bar(otu_table(resfinder_PHY))
# There are the suspicious samples (BH02, BH27, BH30).
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
#resfinder_PHY_ww = subset_samples(resfinder_PHY_hosp, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Or alternatively include fecal but exclude suspicious samples
resfinder_PHY_ast = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Suspicious samples (very high ARG level) (BH02_S77, BH27_S92, BH30_S94)
#resfinder_PHY_clean = subset_samples(resfinder_PHY_ww, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
# Savalou area samples
#resfinder_PHY_hosp = subset_samples(resfinder_PHY_ast, name != "BSE100_S122" & name != "BSE79_S120" & name != "BSE74_S119" & name != "BSE93_S121")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY_ast) == 0)
resfinder_PHY_ast <- prune_taxa(taxa_sums(resfinder_PHY_ast) > 0, resfinder_PHY_ast)
any(taxa_sums(resfinder_PHY_ast) == 0)
mean16S_counts <- mean(metadata$SSU_counts)
mean16S_counts <- mean(metadata$SSU_counts)
lo_data <- data.frame(SUM = round(mean16S_counts * (sample_sums(otu_table(resfinder_PHY_ast)))),
location = sample_data(resfinder_PHY_ast)$location)
View(lo_data)
lo_data <- data.frame(SUM = round(mean16S_counts / (sample_sums(otu_table(resfinder_PHY_ast)))),
location = sample_data(resfinder_PHY_ast)$location)
View(lo_data)
round(mean16S_counts)
mean16S_counts
lo_data <- data.frame(SUM = round(mean16S_counts)/(sample_sums(otu_table(resfinder_PHY_ast))),
location = sample_data(resfinder_PHY_ast)$location)
View(lo_data)
lo_data <- data.frame(SUM = sample_sums(otu_table(resfinder_PHY_ast)/round(mean16S_counts))
)
View(lo_data)
lo_data <- data.frame(SUM = sample_sums(otu_table(resfinder_PHY_ast)/round(mean16S_counts)),
location = sample_data(resfinder_PHY_ast)$location)
View(lo_data)
??hclust
??hclust2
??hclust2
??pheatmap
View(ARG_genemat$BH27_S92)
print(ARG_genemat$BH27_S92))
print(ARG_genemat$BH27_S92)
