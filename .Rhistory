BF <- subset_samples(resfinder_PHY, (country == "Benin"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(resfinder_PHY, (country == "Benin"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
Benin <- subset_samples(resfinder_PHY, (country == "Benin"))
Benin_dist <- vegdist(t(otu_table(Benin)), dist = "horn")
adonis(Benin_dist ~ location, data = data.frame(sample_data(Benin)), permutations = 99999)
BF <- subset_samples(resfinder_PHY, (country == "Burkina Faso"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(resfinder_PHY, (country == "Finland"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
Benin <- subset_samples(metaxa_PHY, (country == "Benin"))
Benin_dist <- vegdist(t(otu_table(Benin)), dist = "horn")
adonis(Benin_dist ~ location, data = data.frame(sample_data(Benin)), permutations = 99999)
BF <- subset_samples(metaxa_PHY, (country == "Burkina Faso"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(metaxa_PHY, (country == "Finland"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
# Load data
metaxa_genus <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/metaxa_genus.txt")
# Create OTU table
OTU_metaxa <- metaxa_genus[,-1]
# Create tax table
tax_table_metaxa <- data.frame(str_split_fixed(data.frame(metaxa_genus) [,1], ";", 6))
colnames(tax_table_metaxa) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus")
# Combine into phyloseq object
metaxa_PHY <- phyloseq(otu_table(OTU_metaxa, taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table_metaxa)), sample_data(metadata))
metadata$SSU_counts <- sample_sums(metaxa_PHY)
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
metaxa_PHY = subset_samples(metaxa_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
metaxa_PHY_ww = subset_samples(metaxa_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Clear taxa that is not present in any of the remaining samples
any(taxa_sums(metaxa_PHY_ww) == 0)
metaxa_PHY <- prune_taxa(taxa_sums(metaxa_PHY_ww) > 0, metaxa_PHY_ww)
any(taxa_sums(metaxa_PHY) == 0)
Benin <- subset_samples(metaxa_PHY, (country == "Benin"))
Benin_dist <- vegdist(t(otu_table(Benin)), dist = "horn")
adonis(Benin_dist ~ location, data = data.frame(sample_data(Benin)), permutations = 99999)
BF <- subset_samples(metaxa_PHY, (country == "Burkina Faso"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(metaxa_PHY, (country == "Finland"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
# In Benin the ARG profile is explained by  % by the location. Whereas in Burkina Faso the same percentage is  %. In Finland the grouping by location is not significant.
Benin <- subset_samples(metaxa_rel_PHY, (country == "Benin"))
Benin_dist <- vegdist(t(otu_table(Benin)), dist = "horn")
adonis(Benin_dist ~ location, data = data.frame(sample_data(Benin)), permutations = 99999)
BF <- subset_samples(metaxa_rel_PHY, (country == "Burkina Faso"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(metaxa_rel_PHY, (country == "Finland"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
# In Benin the ARG profile is explained by  24.1 % by the location. Whereas in Burkina Faso the same percentage is  24.4 %. In Finland the grouping by location is not significant.
Benin <- subset_samples(metaphlan_PHY, (country == "Benin"))
Benin_dist <- vegdist(t(otu_table(Benin)), dist = "horn")
adonis(Benin_dist ~ location, data = data.frame(sample_data(Benin)), permutations = 99999)
BF <- subset_samples(metaphlan_PHY, (country == "Burkina Faso"))
BF_dist <- vegdist(t(otu_table(BF)), dist = "horn")
adonis(BF_dist ~ location, data = data.frame(sample_data(BF)), permutations = 99999)
Finland <- subset_samples(metaphlan_PHY, (country == "Finland"))
Finland_dist <- vegdist(t(otu_table(Finland)), dist = "horn")
adonis(Finland_dist ~ location, data = data.frame(sample_data(Finland)), permutations = 99999)
# In Benin the ARG profile is explained by   % by the location. Whereas in Burkina Faso the same percentage is   %. In Finland the grouping by location is not significant.
metaxa_PHY_abun <- core(metaxa_rel_PHY, detection = 10, prevalence = 20 / 89)
# Load data
metaxa_genus <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/metaxa_genus.txt")
# Create OTU table
OTU_metaxa <- metaxa_genus[,-1]
# Create tax table
tax_table_metaxa <- data.frame(str_split_fixed(data.frame(metaxa_genus) [,1], ";", 6))
colnames(tax_table_metaxa) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus")
# Combine into phyloseq object
metaxa_PHY <- phyloseq(otu_table(OTU_metaxa, taxa_are_rows=TRUE),
tax_table(as.matrix(tax_table_metaxa)), sample_data(metadata))
metadata$SSU_counts <- sample_sums(metaxa_PHY)
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
metaxa_PHY = subset_samples(metaxa_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
metaxa_PHY_ww = subset_samples(metaxa_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Clear taxa that is not present in any of the remaining samples
any(taxa_sums(metaxa_PHY_ww) == 0)
metaxa_PHY <- prune_taxa(taxa_sums(metaxa_PHY_ww) > 0, metaxa_PHY_ww)
any(taxa_sums(metaxa_PHY) == 0)
metaxa_rel_PHY <- transform_sample_counts(metaxa_PHY, function(x) x/sum(x))
metaxa_PHY_abun <- core(metaxa_rel_PHY, detection = 10, prevalence = 20 / 89)
metaxa_PHY_genus <- tax_glom(metaxa_PHY, "Genus")
# Load data
metaxa.com <- metaxa_PHY
taxic_metaxa <- as.data.frame(metaxa.com@tax_table)
# Add OTU ids
taxic_metaxa$OTU <- rownames(taxic_metaxa)
colnames(taxic_metaxa)
# Convert into a matrix.
taxmat_metaxa <- as.matrix(taxic_metaxa)
# Convert into phyloseq compatible file.
new.tax_metaxa <- tax_table(taxmat_metaxa)
# Incroporate into new phyloseq object
tax_table(metaxa.com) <- new.tax_metaxa
# Class level
metaxa_top6class <- aggregate_top_taxa(metaxa.com, top = 6, "Class")
metaxa_top6class.rel <- microbiome::transform(metaxa_top6class, "compositional")
metaxa_top6class.p13 <- plot_composition(metaxa_top6class.rel, group_by = "country") +
theme(legend.position = "bottom") + theme_classic() +
theme(axis.text.x = element_text(angle = 90, size = 8), axis.title = element_blank()) +
ggtitle("Relative abundance of top 6 classes, Metaxa2")
metaxa_top6class.p13 <- plot_composition(metaxa_top6class.rel, group_by = "location") +
theme(legend.position = "bottom") + theme_classic() +
theme(axis.text.x = element_text(angle = 90, size = 8), axis.title = element_blank()) +
ggtitle("Relative abundance of top 6 classes, Metaxa2")
metaxa_top6class.p13 <- plot_composition(metaxa_top6class.rel, group_by = "country") +
theme(legend.position = "bottom") + theme_classic() +
theme(axis.text.x = element_text(angle = 90, size = 8), axis.title = element_blank()) +
ggtitle("Relative abundance of top 6 classes, Metaxa2")
View(metaxa_top6class.rel)
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Class")
p <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE[1:12])),
resfinder_PHY_Class)
p <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE[1:12]), resfinder_PHY_Class))
p <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12], resfinder_PHY_Class))
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Modify "resfinder.fasta" file so that only hits remain
## seqkit grep -f ARG_genes.txt resfinder.fasta > filtered_resfinder.fasta
# Check if there are correct number of lines
## grep ">" filtered_resfinder.fasta | wc -l
# Print out the gene lengths of these genes into file "lengths_resfinder.txt"
## cat filtered_resfinder.fasta | awk '$0 ~ ">" {if (NR > 1) {print c;} c=0;printf substr($0,2,100) "\t"; } $0 !~ ">" {c+=length($0);} END { print c; }' > lengths_resfinder.txt
# Reorder in excel to match with file "ARG_genemat_norm"
lengths_resfinder <-as.matrix(read.table("lengths_resfinder.txt", header= F, check.names = T, row.names = 1))
colnames(lengths_resfinder) <- c("Length")
# Divide by ResFinder hit gene lengths
ARG_length_norm <- ARG_genemat/lengths_resfinder[, 1]
# Divide by SSU counts and normalize to bacterial 16S rRNA length (1550)
ARG_genemat_norm <- t(t(ARG_length_norm)/metadata$SSU_counts) * 1550
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
resfinder_PHY_ww = subset_samples(resfinder_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY_ww) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY_ww) > 0, resfinder_PHY_ww)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Class")
p <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12], resfinder_PHY_Class))
View(resfinder_PHY_Class)
??taxa_sums
p <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
p1 <- transform_sample_counts(p, function(x) x / sum(x))
p2 <- plot_bar(p1, fill="Class") +
facet_grid(~ country, scales = "free_x", space = "free_x",
labeller = labeller(country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
p2
resfinder_PHY_Class_abun_trans <- transform_sample_counts(resfinder_PHY_Class_abun, function(x) x / sum(x))
resfinder_PHY_Class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
resfinder_PHY_Class_abun_trans <- transform_sample_counts(resfinder_PHY_Class_abun, function(x) x / sum(x))
resfinder_mrg_loc <- merge_samples(resfinder_PHY_Class_abun_trans, "location")
resfinder_PHY_Class_abun_trans <- transform_sample_counts(resfinder_mrg_loc, function(x) x / sum(x))
otu_table(resfinder_PHY_Class_abun_trans) <- otu_table(resfinder_PHY_Class_abun_trans)[, ]/as.matrix(table(sample_data(resfinder_PHY)$location))[,
1]
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Set colors
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
resfinder.p17 <- plot_bar(resfinder_mrg_loc_trans, fill = "Genus", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
# Transform_1
resfinder_PHY_Class_abun_trans <- transform_sample_counts(resfinder_PHY_Class_abun, function(x) x / sum(x))
# Merge by location
resfinder_mrg_loc <- merge_samples(resfinder_PHY_Class_abun_trans, "location")
# Transform_2
resfinder_mrg_loc_trans <- transform_sample_counts(resfinder_mrg_loc, function(x) x / sum(x))
# Normalize by sample number / location
otu_table(resfinder_mrg_loc_trans) <- otu_table(resfinder_mrg_loc_trans)[, ]/as.matrix(table(sample_data(resfinder_PHY)$location))[,
1]
# Set colors
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
resfinder.p17 <- plot_bar(resfinder_mrg_loc_trans, fill = "Genus", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
resfinder.p17
resfinder.p17 <- plot_bar(resfinder_mrg_loc_trans, fill = "Class", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
resfinder.p17
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Genus")
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Class")
resfinder_PHY_Class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
resfinder_PHY_Class_abun <- subset_samples(resfinder_PHY_Class_abun, sample_sums(resfinder_PHY_Class_abun) !=
0)
otu_table(resfinder_PHY_Class_abun) <- otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY)$location))[,
1]
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
resfinder.p17 <- plot_bar(resfinder_PHY_Class_abun, fill = "Class", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
resfinder.p17
resfinder_PHY_Class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
otu_table(resfinder_PHY_Class_abun) <- otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY)$location))[,
1]
resfinder_PHY_Class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
otu_table(resfinder_PHY_Class_abun) <- otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY)$country))[,
1]
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
resfinder.p17 <- plot_bar(resfinder_PHY_Class_abun, fill = "Class", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
resfinder.p17
otu_table(resfinder_PHY_Class) <- otu_table(resfinder_PHY_Class)[, ]/as.matrix(table(sample_data(resfinder_PHY)$country))[,
1]
nb.cols <- 12
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
resfinder.p17 <- plot_bar(resfinder_PHY_Class, fill = "Class", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
resfinder.p17
nb.cols <- 16
mycolors <- colorRampPalette(brewer.pal(8, "Dark2"))(nb.cols)
# Facet labs
country.labs <- c("1" = "Benin", "2" = "Burkina Faso", "3" = "Finland")
# Plot
resfinder.p17 <- plot_bar(resfinder_PHY_Class, fill = "Class", title = "12 most abundant genera") +
facet_grid(~country, scales = "free_x", space = "free_x", labeller = labeller(country = country.labs)) +
theme_classic() +
theme(axis.text.x = element_text(angle=75, hjust=1, size = 10),
axis.title.x = element_blank()) +
ylab("Relative abundance (%)") + xlab("") +
scale_fill_manual(values=mycolors) +
guides(fill = guide_legend(label.theme = element_text(size = 8), keywidth = 1.8, keyheight = 1.8, title = "Class"))
resfinder.p17
resfinder_PHY_Class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE[1:12])),
resfinder_PHY_Class)
resfinder_PHY_Class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE[1:12])), resfinder_PHY_Class)
resfinder_PHY_Class_abun <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE[1:12]),resfinder_PHY_Class))
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Class")
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Class")
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
otu_table(resfinder_PHY_Class_abun) <- (otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY_Class_abun)$location))[,
1])
p <- plot_bar(resfinder_PHY_Class_abun, "location", fill = "Class")
a <- p + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance class") + ylab("Sum abundance/16S") + xlab("")
# Modify mapping output file "ARG_genemat.txt" in command line to match sample names in metadata file
## sed 's/BFH38-A_S156/BFH38.A_S156/g' ARG_genemat.txt > mod_ARG_genemat.txt
## sed -i 's/BFH38-B_S157/BFH38.B_S157/g' mod_ARG_genemat.txt
## sed -i 's/BH34-A_S98/BH34.A_S98/g' mod_ARG_genemat.txt
## sed -i 's/BH34-B_S99/BH34.B_S99/g' mod_ARG_genemat.txt
ARG_genemat <-as.matrix(read.table("mod_ARG_genemat.txt", header= T, check.names = F, row.names = 1))
# Modify "resfinder.fasta" file so that only hits remain
## seqkit grep -f ARG_genes.txt resfinder.fasta > filtered_resfinder.fasta
# Check if there are correct number of lines
## grep ">" filtered_resfinder.fasta | wc -l
# Print out the gene lengths of these genes into file "lengths_resfinder.txt"
## cat filtered_resfinder.fasta | awk '$0 ~ ">" {if (NR > 1) {print c;} c=0;printf substr($0,2,100) "\t"; } $0 !~ ">" {c+=length($0);} END { print c; }' > lengths_resfinder.txt
# Reorder in excel to match with file "ARG_genemat_norm"
lengths_resfinder <-as.matrix(read.table("lengths_resfinder.txt", header= F, check.names = T, row.names = 1))
colnames(lengths_resfinder) <- c("Length")
# Divide by ResFinder hit gene lengths
ARG_length_norm <- ARG_genemat/lengths_resfinder[, 1]
# Divide by SSU counts and normalize to bacterial 16S rRNA length (1550)
ARG_genemat_norm <- t(t(ARG_length_norm)/metadata$SSU_counts) * 1550
# Check if correct:
identical(ARG_genemat[2020, 4]/metadata$SSU_counts[4], ARG_genemat_norm[2020, 4])
# Save and load again to exclude row.names
write.table(ARG_genemat_norm, "~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=T, sep = "\t", col.names = T)
ARG_genemat_norm <- read.delim("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/ARG_genemat_norm.txt", row.names=NULL)
ARG_genemat_norm$row.names<-NULL
# Create tax table
tax_table_resfinder <- read.csv("~/Documents/Metagenomes_AMRIWA/R/AMRIWA/RFiles/tax_table_resfinder.txt", header=FALSE, sep=";")
colnames(tax_table_resfinder) <- c("Gene", "Class")
# Combine to phyloseq object
resfinder_PHY <- phyloseq(otu_table(ARG_genemat_norm, taxa_are_rows = TRUE), sample_data(metadata),
tax_table(as.matrix(tax_table_resfinder)))
# With low quality (BFH24_S142, BH63_S118, FH10_S171)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH24_S142" & name != "BH63_S118" & name != "FH10_S171")
# Feces samples (BH20_S88, BH22_S89, BH24_S90, BH25_S91)
resfinder_PHY_ww = subset_samples(resfinder_PHY, name!="BH20_S88" & name!="BH22_S89" & name!="BH24_S90" & name!="BH25_S91")
# Check if there are taxa that are not present in any of the remaining samples
any(taxa_sums(resfinder_PHY_ww) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY_ww) > 0, resfinder_PHY_ww)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Class")
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
otu_table(resfinder_PHY_Class_abun) <- (otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY_Class_abun)$location))[,
1])
p <- plot_bar(resfinder_PHY_Class_abun, "location", fill = "Class")
a <- p + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance class") + ylab("Sum abundance/16S") + xlab("")
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
otu_table(resfinder_PHY_Class_abun) <- (otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY_Class_abun)$location))[,
1])
otu_table(resfinder_PHY_Class_abun) <- (otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY)$location))[,
1])
otu_table(resfinder_PHY_Class_abun) <- (otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY)$country))[,
1])
p <- plot_bar(resfinder_PHY_Class_abun, "country", fill = "Class")
a <- p + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance class") + ylab("Sum abundance/16S") + xlab("")
p
otu_table(resfinder_PHY_Class_abun) <- (otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY_Class_abun)$country))[,
1])
p <- plot_bar(resfinder_PHY_Class_abun, "country", fill = "Class")
a <- p + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance class") + ylab("Sum abundance/16S") + xlab("")
p
otu_table(resfinder_PHY_Class_abun) <- (otu_table(resfinder_PHY_Class_abun)[, ]/as.matrix(table(sample_data(resfinder_PHY_Class_abun)$location))[,
1])
p <- plot_bar(resfinder_PHY_Class_abun, "location", fill = "Class")
a <- p + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance class") + ylab("Sum abundance/16S") + xlab("")
p
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
p <- plot_bar(resfinder_PHY_Class_abun, fill = "Class")
a <- p + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance class") + ylab("Sum abundance/16S") + xlab("")
p
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
p
filtered_resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH02_S77" & name != "BH27_S94" & name != "BH30_92")
any(taxa_sums(resfinder_PHY) == 0)
any(taxa_sums(filtered_resfinder_PHY) == 0)
any(taxa_sums(filtered_resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(filtered_resfinder_PHY) > 0, filtered_resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
p
filtered_resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH02_S77" & name != "BH27_S94" & name != "BH30_92")
# Clean
any(taxa_sums(filtered_resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(filtered_resfinder_PHY) > 0, filtered_resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY_Gene <- tax_glom(filtered_resfinder_PHY, "Gene")
resfinder_PHY_Gene <- tax_glom(filtered_resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
p
filtered_PHY = subset_samples(resfinder_PHY, name != "BFH02_S77" & name != "BH27_S94" & name != "BH30_92")
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH02_S77" & name != "BH27_S94" & name != "BH30_92")
any(taxa_sums(resfinder_PHY) == 0)
View(resfinder_PHY)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BFH02_S77" & name != "BH27_S94" & name != "BH30_92")
View(resfinder_PHY)
resfinder_PHY@sam_data[["name"]]
resfinder_PHY = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_94")
any(taxa_sums(resfinder_PHY) == 0)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY) > 0, resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
p
resfinder_PHY = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_94")
View(resfinder_PHY)
resfinder_PHY = subset_samples(resfinder_PHY, name != "BH02_S77" & name != "BH27_S92" & name != "BH30_S94")
View(resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY <- prune_taxa(taxa_sums(resfinder_PHY) > 0, resfinder_PHY)
any(taxa_sums(resfinder_PHY) == 0)
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene <- tax_glom(resfinder_PHY, "Gene")
resfinder_PHY_Gene_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Gene), TRUE)[1:12]),
resfinder_PHY_Gene)
p <- plot_bar(resfinder_PHY_Gene_abund, fill = "Gene")
a <- p + geom_bar(aes(color = Gene, fill = Gene), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
p
p
resfinder_PHY_Class <- tax_glom(resfinder_PHY, "Class")
resfinder_PHY_Class_abund <- prune_taxa(names(sort(taxa_sums(resfinder_PHY_Class), TRUE)[1:12]),
resfinder_PHY_Class)
pl <- plot_bar(resfinder_PHY_Gene_abund, fill = "Class")
b <- pl + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
b
pl <- plot_bar(resfinder_PHY_Class_abund, fill = "Class")
b <- pl + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance gene") + ylab("Sum abundance/16S") + xlab("")
b
pl <- plot_bar(resfinder_PHY_Class_abund, fill = "Class")
b <- pl + geom_bar(aes(color = Class, fill = Class), stat = "identity", position = "stack") +
scale_color_brewer(palette = "Set3", "Resistance class") + scale_fill_brewer(palette = "Set3",
"Resistance class") + ylab("Sum abundance/16S") + xlab("")
b
```{r}
heat.resfinder <- plot_taxa_heatmap(resfinder_PHY_Gene,
subset.top = 50,
VariableA = "country",
heatcolors = rev(brewer.pal(12, "GnBu")),
transformation = "log10",
cluster_cols = T)
