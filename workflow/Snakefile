SAMPLES, = glob_wildcards("data/{sample}_R1_001.fastq.gz")

rule all:
	input:
		expand("data/FASTQC/{sample}_{read}_001_fastqc.zip", sample=SAMPLES, read=["R1", "R2"]),
		expand("trimmed_data/{sample}_{read}_trimmed.fastq.gz", sample=SAMPLES, read=["R1", "R2"]),
		expand("trimmed_data/FASTQC/{sample}_{read}_trimmed_fastqc.zip", sample=SAMPLES, read=["R1", "R2"]),
		expand("metaxa2/{sample}_metaxa", sample=SAMPLES),
		"data/multiqc_report.html",
		"trimmed_data/multiqc_report.html"

rule fastqc_raw:
	input:
		"data/{sample}_{read}_001.fastq.gz"
	output:
		"data/FASTQC/{sample}_{read}_001_fastqc.zip"
	message:
		"-- Quality check of raw data with Fastqc --"
	conda:
		"envs/QC_env.yml"
	threads:
		2
	shell:
              "fastqc --quiet -t {threads} --outdir data/FASTQC -f fastq {input}"

rule multiqc_raw:
	input:
		expand("data/FASTQC/{sample}_{read}_001_fastqc.zip", sample=SAMPLES, read=["R1", "R2"])
	output:
		"data/multiqc_report.html"
	message:
		"-- Running MultiQC for raw data --"
	conda:
		"envs/QC_env.yml"
	shell:
		"multiqc -f --interactive --quiet data/ -o data/"

rule cutadapt:
	input:
		fw= "data/{sample}_R1_001.fastq.gz",
		rv= "data/{sample}_R2_001.fastq.gz"
	output:
		fw= "trimmed_data/{sample}_R1_trimmed.fastq.gz",
		rv= "trimmed_data/{sample}_R2_trimmed.fastq.gz",
		log= "trimmed_data/{sample}.trimmed.txt"
	message:
		"-- Running Cutadapt --"
	conda:
		"envs/cutadapt.yml"
	shell:
		"cutadapt -a CTGTCTCTTATACACATCT -A CTGTCTCTTATACACATCT -O 10 -m 30 -q 20 \
                                {input.fw} {input.rv} -o {output.fw} -p {output.rv} > {output.log}"

rule fastqc_trim:
	input:
		"trimmed_data/{sample}_{read}_trimmed.fastq.gz"
	output:
		"trimmed_data/FASTQC/{sample}_{read}_trimmed_fastqc.zip"
	message:
		"-- Quality check of trimmed data with Fastqc --"
	conda:
		"envs/QC_env.yml"
	threads:
		2
	shell:
		"fastqc --quiet -t {threads} --outdir trimmed_data/FASTQC -f fastq {input}"

rule multiqc_trim:
	input:
		expand("trimmed_data/FASTQC/{sample}_{read}_trimmed_fastqc.zip", sample=SAMPLES, read=["R1", "R2"])
	output:
		"trimmed_data/multiqc_report.html"
	message:
		"-- Running MultiQC for trimmed data--"
	conda:
		"envs/QC_env.yml"
	shell:
		"multiqc -f --interactive --quiet trimmed_data/ -o trimmed_data/"

#rule fastq_to_fasta:
#       input:
#               expand("trimmed_data/{sample}_{read}_trimmed.fastq.gz", sample=SAMPLES, read=["R1", "R2"])
#       output:
#               expand("fasta/{sample}_{read}_trimmed.fasta", sample=SAMPLES, read=["R1", "R2"])
#       message:
#               "-- Converting fastq to FASTA --""
#       conda:
#               "envs/seqkit.yml"
#       threads:
#               1
#       shell:
#               "seqtk seq -a {input} > {output}

#rule metaxa2:
#       input:
#               fw= ".fasta",
#               rv= ".fasta"
#       output:
#               "metaxa2/{sample}"
#       message:
#               "-- Running Metaxa2 --""
#       conda:
#               "envs/metaxa.yml"
#       threads:
#               2
#       shell:
#		"metaxa2 -1 {input.fw} -2 {input.rv} -o {output} --align-none --plus --graphical F -t {threads}"
#		"metaxa2_ttt -i {output}/{sample}.taxonomy.txt -o {output}/{sample}_metaxa"
#		"metaxa2_dc -o metaxa_genus.txt {output}/{sample}_metaxa/{sample}level_6.txt"

#rule mapping_ResFinder:
#	input:
#		fw= "trimmed_data/{sample}_R1_trimmed.fastq.gz",
#		rv= "trimmed_data/{sample}_R2_trimmed.fastq.gz"
#	output:
#		""
#	message:
#		"-- Mapping reads to ResFinder w/ Bowtie2 --"
#	threads:
#		2
#	shell:
#		"bowtie -x resfinder_db/ResFinder -1 {input.fw} -2 {input.rv} --very-sensitive -t {threads} | samtools view -Sb - > {sample}.bam"

#rule fastq_to_fasta:
#       input:
#               expand("trimmed_data/{sample}_{read}_trimmed.fastq.gz", sample=SAMPLES, read=["R1", "R2"])
#       output:
#               expand("CARD_results/{sample}_{read}_trimmed.fasta", sample=SAMPLES, read=["R1", "R2"])
#       message:
#               "-- Converting fastq to FASTA --""
#       conda:
#               "envs/seqkit.yml"
#       threads:
#               1
#       shell:
#               "seqtk seq -a {input} > {output}

#rule CARD_annotation:
#       input:
#       output:
#       message:
#               "-- Running DIAMOND w/ CARD --"
#       conda:
#               "envs/diamond.yml"
#       threads:
#               1
#       shell:
#               "diamond blastx -in -out "
